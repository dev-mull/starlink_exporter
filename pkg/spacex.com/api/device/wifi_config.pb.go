// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: spacex/api/device/wifi_config.proto

package device

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeshAuth int32

const (
	MeshAuth_MESH_AUTH_UNKNOWN   MeshAuth = 0
	MeshAuth_MESH_AUTH_NEW       MeshAuth = 1
	MeshAuth_MESH_AUTH_TRUSTED   MeshAuth = 2
	MeshAuth_MESH_AUTH_UNTRUSTED MeshAuth = 3
)

// Enum value maps for MeshAuth.
var (
	MeshAuth_name = map[int32]string{
		0: "MESH_AUTH_UNKNOWN",
		1: "MESH_AUTH_NEW",
		2: "MESH_AUTH_TRUSTED",
		3: "MESH_AUTH_UNTRUSTED",
	}
	MeshAuth_value = map[string]int32{
		"MESH_AUTH_UNKNOWN":   0,
		"MESH_AUTH_NEW":       1,
		"MESH_AUTH_TRUSTED":   2,
		"MESH_AUTH_UNTRUSTED": 3,
	}
)

func (x MeshAuth) Enum() *MeshAuth {
	p := new(MeshAuth)
	*p = x
	return p
}

func (x MeshAuth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeshAuth) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[0].Descriptor()
}

func (MeshAuth) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[0]
}

func (x MeshAuth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeshAuth.Descriptor instead.
func (MeshAuth) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{0}
}

type WifiConfig_Security int32

const (
	WifiConfig_UNKNOWN  WifiConfig_Security = 0
	WifiConfig_WPA2     WifiConfig_Security = 1
	WifiConfig_WPA3     WifiConfig_Security = 2
	WifiConfig_WPA2WPA3 WifiConfig_Security = 3
)

// Enum value maps for WifiConfig_Security.
var (
	WifiConfig_Security_name = map[int32]string{
		0: "UNKNOWN",
		1: "WPA2",
		2: "WPA3",
		3: "WPA2WPA3",
	}
	WifiConfig_Security_value = map[string]int32{
		"UNKNOWN":  0,
		"WPA2":     1,
		"WPA3":     2,
		"WPA2WPA3": 3,
	}
)

func (x WifiConfig_Security) Enum() *WifiConfig_Security {
	p := new(WifiConfig_Security)
	*p = x
	return p
}

func (x WifiConfig_Security) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_Security) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[1].Descriptor()
}

func (WifiConfig_Security) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[1]
}

func (x WifiConfig_Security) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_Security.Descriptor instead.
func (WifiConfig_Security) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{0, 0}
}

type WifiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkName          string `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	ApplyNetworkName     bool   `protobuf:"varint,1001,opt,name=apply_network_name,json=applyNetworkName,proto3" json:"apply_network_name,omitempty"`
	NetworkPassword      string `protobuf:"bytes,2,opt,name=network_password,json=networkPassword,proto3" json:"network_password,omitempty"`
	ApplyNetworkPassword bool   `protobuf:"varint,1002,opt,name=apply_network_password,json=applyNetworkPassword,proto3" json:"apply_network_password,omitempty"`
	CountryCode          string `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LanIpv4              string `protobuf:"bytes,5,opt,name=lan_ipv4,json=lanIpv4,proto3" json:"lan_ipv4,omitempty"`
	LanIpv4SubnetMask    string `protobuf:"bytes,6,opt,name=lan_ipv4_subnet_mask,json=lanIpv4SubnetMask,proto3" json:"lan_ipv4_subnet_mask,omitempty"`
	SetupComplete        bool   `protobuf:"varint,7,opt,name=setup_complete,json=setupComplete,proto3" json:"setup_complete,omitempty"`
	ApplySetupComplete   bool   `protobuf:"varint,1010,opt,name=apply_setup_complete,json=applySetupComplete,proto3" json:"apply_setup_complete,omitempty"`
	// Deprecated: Do not use.
	FactoryResetTicker         uint32              `protobuf:"varint,8,opt,name=factory_reset_ticker,json=factoryResetTicker,proto3" json:"factory_reset_ticker,omitempty"`
	Version                    uint32              `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	WifiSecurity               WifiConfig_Security `protobuf:"varint,10,opt,name=wifi_security,json=wifiSecurity,proto3,enum=SpaceX.API.Device.WifiConfig_Security" json:"wifi_security,omitempty"`
	ApplyWifiSecurity          bool                `protobuf:"varint,1004,opt,name=apply_wifi_security,json=applyWifiSecurity,proto3" json:"apply_wifi_security,omitempty"`
	NetworkName_5Ghz           string              `protobuf:"bytes,11,opt,name=network_name_5ghz,json=networkName5ghz,proto3" json:"network_name_5ghz,omitempty"`
	ApplyNetworkName_5Ghz      bool                `protobuf:"varint,1005,opt,name=apply_network_name_5ghz,json=applyNetworkName5ghz,proto3" json:"apply_network_name_5ghz,omitempty"`
	MacWan                     string              `protobuf:"bytes,12,opt,name=mac_wan,json=macWan,proto3" json:"mac_wan,omitempty"`
	ApplyMacWan                bool                `protobuf:"varint,1006,opt,name=apply_mac_wan,json=applyMacWan,proto3" json:"apply_mac_wan,omitempty"`
	MacLan                     string              `protobuf:"bytes,13,opt,name=mac_lan,json=macLan,proto3" json:"mac_lan,omitempty"`
	ApplyMacLan                bool                `protobuf:"varint,1007,opt,name=apply_mac_lan,json=applyMacLan,proto3" json:"apply_mac_lan,omitempty"`
	MacLan_2Ghz                string              `protobuf:"bytes,14,opt,name=mac_lan_2ghz,json=macLan2ghz,proto3" json:"mac_lan_2ghz,omitempty"`
	ApplyMacLan_2Ghz           bool                `protobuf:"varint,1008,opt,name=apply_mac_lan_2ghz,json=applyMacLan2ghz,proto3" json:"apply_mac_lan_2ghz,omitempty"`
	MacLan_5Ghz                string              `protobuf:"bytes,15,opt,name=mac_lan_5ghz,json=macLan5ghz,proto3" json:"mac_lan_5ghz,omitempty"`
	ApplyMacLan_5Ghz           bool                `protobuf:"varint,1009,opt,name=apply_mac_lan_5ghz,json=applyMacLan5ghz,proto3" json:"apply_mac_lan_5ghz,omitempty"`
	DeviceId                   string              `protobuf:"bytes,16,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Disable_2Ghz               bool                `protobuf:"varint,17,opt,name=disable_2ghz,json=disable2ghz,proto3" json:"disable_2ghz,omitempty"`
	ApplyDisable_2Ghz          bool                `protobuf:"varint,1011,opt,name=apply_disable_2ghz,json=applyDisable2ghz,proto3" json:"apply_disable_2ghz,omitempty"`
	Disable_5Ghz               bool                `protobuf:"varint,18,opt,name=disable_5ghz,json=disable5ghz,proto3" json:"disable_5ghz,omitempty"`
	ApplyDisable_5Ghz          bool                `protobuf:"varint,1012,opt,name=apply_disable_5ghz,json=applyDisable5ghz,proto3" json:"apply_disable_5ghz,omitempty"`
	Channel_2Ghz               uint32              `protobuf:"varint,19,opt,name=channel_2ghz,json=channel2ghz,proto3" json:"channel_2ghz,omitempty"`
	ApplyChannel_2Ghz          bool                `protobuf:"varint,1013,opt,name=apply_channel_2ghz,json=applyChannel2ghz,proto3" json:"apply_channel_2ghz,omitempty"`
	Channel_5Ghz               uint32              `protobuf:"varint,20,opt,name=channel_5ghz,json=channel5ghz,proto3" json:"channel_5ghz,omitempty"`
	ApplyChannel_5Ghz          bool                `protobuf:"varint,1014,opt,name=apply_channel_5ghz,json=applyChannel5ghz,proto3" json:"apply_channel_5ghz,omitempty"`
	MeshAuths                  map[string]MeshAuth `protobuf:"bytes,21,rep,name=mesh_auths,json=meshAuths,proto3" json:"mesh_auths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=SpaceX.API.Device.MeshAuth"`
	ApplyMeshAuths             bool                `protobuf:"varint,1021,opt,name=apply_mesh_auths,json=applyMeshAuths,proto3" json:"apply_mesh_auths,omitempty"`
	MeshUpstreams              []string            `protobuf:"bytes,25,rep,name=mesh_upstreams,json=meshUpstreams,proto3" json:"mesh_upstreams,omitempty"`
	ApplyMeshUpstreams         bool                `protobuf:"varint,1051,opt,name=apply_mesh_upstreams,json=applyMeshUpstreams,proto3" json:"apply_mesh_upstreams,omitempty"`
	DynamicKeys                []*PublicKey        `protobuf:"bytes,22,rep,name=dynamic_keys,json=dynamicKeys,proto3" json:"dynamic_keys,omitempty"`
	IsRepeater                 bool                `protobuf:"varint,23,opt,name=is_repeater,json=isRepeater,proto3" json:"is_repeater,omitempty"`
	ApplyIsRepeater            bool                `protobuf:"varint,1031,opt,name=apply_is_repeater,json=applyIsRepeater,proto3" json:"apply_is_repeater,omitempty"`
	ExperimentsEnableMesh      bool                `protobuf:"varint,24,opt,name=experiments_enable_mesh,json=experimentsEnableMesh,proto3" json:"experiments_enable_mesh,omitempty"`
	ApplyExperimentsEnableMesh bool                `protobuf:"varint,1041,opt,name=apply_experiments_enable_mesh,json=applyExperimentsEnableMesh,proto3" json:"apply_experiments_enable_mesh,omitempty"`
	BootCount                  int32               `protobuf:"varint,26,opt,name=boot_count,json=bootCount,proto3" json:"boot_count,omitempty"`
}

func (x *WifiConfig) Reset() {
	*x = WifiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_wifi_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig) ProtoMessage() {}

func (x *WifiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig.ProtoReflect.Descriptor instead.
func (*WifiConfig) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{0}
}

func (x *WifiConfig) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *WifiConfig) GetApplyNetworkName() bool {
	if x != nil {
		return x.ApplyNetworkName
	}
	return false
}

func (x *WifiConfig) GetNetworkPassword() string {
	if x != nil {
		return x.NetworkPassword
	}
	return ""
}

func (x *WifiConfig) GetApplyNetworkPassword() bool {
	if x != nil {
		return x.ApplyNetworkPassword
	}
	return false
}

func (x *WifiConfig) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *WifiConfig) GetLanIpv4() string {
	if x != nil {
		return x.LanIpv4
	}
	return ""
}

func (x *WifiConfig) GetLanIpv4SubnetMask() string {
	if x != nil {
		return x.LanIpv4SubnetMask
	}
	return ""
}

func (x *WifiConfig) GetSetupComplete() bool {
	if x != nil {
		return x.SetupComplete
	}
	return false
}

func (x *WifiConfig) GetApplySetupComplete() bool {
	if x != nil {
		return x.ApplySetupComplete
	}
	return false
}

// Deprecated: Do not use.
func (x *WifiConfig) GetFactoryResetTicker() uint32 {
	if x != nil {
		return x.FactoryResetTicker
	}
	return 0
}

func (x *WifiConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WifiConfig) GetWifiSecurity() WifiConfig_Security {
	if x != nil {
		return x.WifiSecurity
	}
	return WifiConfig_UNKNOWN
}

func (x *WifiConfig) GetApplyWifiSecurity() bool {
	if x != nil {
		return x.ApplyWifiSecurity
	}
	return false
}

func (x *WifiConfig) GetNetworkName_5Ghz() string {
	if x != nil {
		return x.NetworkName_5Ghz
	}
	return ""
}

func (x *WifiConfig) GetApplyNetworkName_5Ghz() bool {
	if x != nil {
		return x.ApplyNetworkName_5Ghz
	}
	return false
}

func (x *WifiConfig) GetMacWan() string {
	if x != nil {
		return x.MacWan
	}
	return ""
}

func (x *WifiConfig) GetApplyMacWan() bool {
	if x != nil {
		return x.ApplyMacWan
	}
	return false
}

func (x *WifiConfig) GetMacLan() string {
	if x != nil {
		return x.MacLan
	}
	return ""
}

func (x *WifiConfig) GetApplyMacLan() bool {
	if x != nil {
		return x.ApplyMacLan
	}
	return false
}

func (x *WifiConfig) GetMacLan_2Ghz() string {
	if x != nil {
		return x.MacLan_2Ghz
	}
	return ""
}

func (x *WifiConfig) GetApplyMacLan_2Ghz() bool {
	if x != nil {
		return x.ApplyMacLan_2Ghz
	}
	return false
}

func (x *WifiConfig) GetMacLan_5Ghz() string {
	if x != nil {
		return x.MacLan_5Ghz
	}
	return ""
}

func (x *WifiConfig) GetApplyMacLan_5Ghz() bool {
	if x != nil {
		return x.ApplyMacLan_5Ghz
	}
	return false
}

func (x *WifiConfig) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *WifiConfig) GetDisable_2Ghz() bool {
	if x != nil {
		return x.Disable_2Ghz
	}
	return false
}

func (x *WifiConfig) GetApplyDisable_2Ghz() bool {
	if x != nil {
		return x.ApplyDisable_2Ghz
	}
	return false
}

func (x *WifiConfig) GetDisable_5Ghz() bool {
	if x != nil {
		return x.Disable_5Ghz
	}
	return false
}

func (x *WifiConfig) GetApplyDisable_5Ghz() bool {
	if x != nil {
		return x.ApplyDisable_5Ghz
	}
	return false
}

func (x *WifiConfig) GetChannel_2Ghz() uint32 {
	if x != nil {
		return x.Channel_2Ghz
	}
	return 0
}

func (x *WifiConfig) GetApplyChannel_2Ghz() bool {
	if x != nil {
		return x.ApplyChannel_2Ghz
	}
	return false
}

func (x *WifiConfig) GetChannel_5Ghz() uint32 {
	if x != nil {
		return x.Channel_5Ghz
	}
	return 0
}

func (x *WifiConfig) GetApplyChannel_5Ghz() bool {
	if x != nil {
		return x.ApplyChannel_5Ghz
	}
	return false
}

func (x *WifiConfig) GetMeshAuths() map[string]MeshAuth {
	if x != nil {
		return x.MeshAuths
	}
	return nil
}

func (x *WifiConfig) GetApplyMeshAuths() bool {
	if x != nil {
		return x.ApplyMeshAuths
	}
	return false
}

func (x *WifiConfig) GetMeshUpstreams() []string {
	if x != nil {
		return x.MeshUpstreams
	}
	return nil
}

func (x *WifiConfig) GetApplyMeshUpstreams() bool {
	if x != nil {
		return x.ApplyMeshUpstreams
	}
	return false
}

func (x *WifiConfig) GetDynamicKeys() []*PublicKey {
	if x != nil {
		return x.DynamicKeys
	}
	return nil
}

func (x *WifiConfig) GetIsRepeater() bool {
	if x != nil {
		return x.IsRepeater
	}
	return false
}

func (x *WifiConfig) GetApplyIsRepeater() bool {
	if x != nil {
		return x.ApplyIsRepeater
	}
	return false
}

func (x *WifiConfig) GetExperimentsEnableMesh() bool {
	if x != nil {
		return x.ExperimentsEnableMesh
	}
	return false
}

func (x *WifiConfig) GetApplyExperimentsEnableMesh() bool {
	if x != nil {
		return x.ApplyExperimentsEnableMesh
	}
	return false
}

func (x *WifiConfig) GetBootCount() int32 {
	if x != nil {
		return x.BootCount
	}
	return 0
}

var File_spacex_api_device_wifi_config_proto protoreflect.FileDescriptor

var file_spacex_api_device_wifi_config_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x0f, 0x0a, 0x0a, 0x57, 0x69,
	0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0xea, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x6e, 0x49, 0x70, 0x76,
	0x34, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x66, 0x69,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x35, 0x67, 0x68, 0x7a, 0x12,
	0x36, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x5f, 0x77,
	0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x57, 0x61, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x77, 0x61,
	0x6e, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d,
	0x61, 0x63, 0x57, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x61, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x4c, 0x61, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x18,
	0xef, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x63,
	0x4c, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x32,
	0x67, 0x68, 0x7a, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x4c, 0x61,
	0x6e, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0xf0, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x63, 0x4c, 0x61, 0x6e, 0x32,
	0x67, 0x68, 0x7a, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x35,
	0x67, 0x68, 0x7a, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x4c, 0x61,
	0x6e, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0xf1, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x63, 0x4c, 0x61, 0x6e, 0x35,
	0x67, 0x68, 0x7a, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x32, 0x67, 0x68, 0x7a,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x32,
	0x67, 0x68, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x67,
	0x68, 0x7a, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x35, 0x67,
	0x68, 0x7a, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0xf4, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x35, 0x67, 0x68, 0x7a, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x32, 0x67, 0x68, 0x7a, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x32, 0x67, 0x68, 0x7a, 0x18, 0xf5, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x32, 0x67, 0x68, 0x7a, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x35, 0x67, 0x68, 0x7a, 0x18,
	0xf6, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x35, 0x67, 0x68, 0x7a, 0x12, 0x4b, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x68,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x68,
	0x41, 0x75, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x68,
	0x41, 0x75, 0x74, 0x68, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d,
	0x65, 0x73, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x68, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x9b, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73,
	0x68, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x18, 0x87, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x73, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73,
	0x68, 0x12, 0x42, 0x0a, 0x1d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x68, 0x18, 0x91, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x59, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x68,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x39, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x50, 0x41, 0x32,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x50, 0x41, 0x33, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x57, 0x50, 0x41, 0x32, 0x57, 0x50, 0x41, 0x33, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x06, 0x08, 0xeb, 0x07, 0x10, 0xec, 0x07, 0x2a, 0x64, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x68,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x45, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x52, 0x55, 0x53,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x42, 0x17,
	0x5a, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spacex_api_device_wifi_config_proto_rawDescOnce sync.Once
	file_spacex_api_device_wifi_config_proto_rawDescData = file_spacex_api_device_wifi_config_proto_rawDesc
)

func file_spacex_api_device_wifi_config_proto_rawDescGZIP() []byte {
	file_spacex_api_device_wifi_config_proto_rawDescOnce.Do(func() {
		file_spacex_api_device_wifi_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacex_api_device_wifi_config_proto_rawDescData)
	})
	return file_spacex_api_device_wifi_config_proto_rawDescData
}

var file_spacex_api_device_wifi_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_spacex_api_device_wifi_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_spacex_api_device_wifi_config_proto_goTypes = []interface{}{
	(MeshAuth)(0),            // 0: SpaceX.API.Device.MeshAuth
	(WifiConfig_Security)(0), // 1: SpaceX.API.Device.WifiConfig.Security
	(*WifiConfig)(nil),       // 2: SpaceX.API.Device.WifiConfig
	nil,                      // 3: SpaceX.API.Device.WifiConfig.MeshAuthsEntry
	(*PublicKey)(nil),        // 4: SpaceX.API.Device.PublicKey
}
var file_spacex_api_device_wifi_config_proto_depIdxs = []int32{
	1, // 0: SpaceX.API.Device.WifiConfig.wifi_security:type_name -> SpaceX.API.Device.WifiConfig.Security
	3, // 1: SpaceX.API.Device.WifiConfig.mesh_auths:type_name -> SpaceX.API.Device.WifiConfig.MeshAuthsEntry
	4, // 2: SpaceX.API.Device.WifiConfig.dynamic_keys:type_name -> SpaceX.API.Device.PublicKey
	0, // 3: SpaceX.API.Device.WifiConfig.MeshAuthsEntry.value:type_name -> SpaceX.API.Device.MeshAuth
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_spacex_api_device_wifi_config_proto_init() }
func file_spacex_api_device_wifi_config_proto_init() {
	if File_spacex_api_device_wifi_config_proto != nil {
		return
	}
	file_spacex_api_device_command_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spacex_api_device_wifi_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacex_api_device_wifi_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spacex_api_device_wifi_config_proto_goTypes,
		DependencyIndexes: file_spacex_api_device_wifi_config_proto_depIdxs,
		EnumInfos:         file_spacex_api_device_wifi_config_proto_enumTypes,
		MessageInfos:      file_spacex_api_device_wifi_config_proto_msgTypes,
	}.Build()
	File_spacex_api_device_wifi_config_proto = out.File
	file_spacex_api_device_wifi_config_proto_rawDesc = nil
	file_spacex_api_device_wifi_config_proto_goTypes = nil
	file_spacex_api_device_wifi_config_proto_depIdxs = nil
}
