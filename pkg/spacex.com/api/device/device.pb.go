// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: spacex/api/device/device.proto

package device

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	status "github.com/dev-mull/starlink_exporter/pkg/spacex.com/api/status"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientPlatform_Platform int32

const (
	ClientPlatform_UNKNOWN ClientPlatform_Platform = 0
	ClientPlatform_IOS     ClientPlatform_Platform = 1
	ClientPlatform_ANDROID ClientPlatform_Platform = 2
	ClientPlatform_WEB     ClientPlatform_Platform = 3
)

// Enum value maps for ClientPlatform_Platform.
var (
	ClientPlatform_Platform_name = map[int32]string{
		0: "UNKNOWN",
		1: "IOS",
		2: "ANDROID",
		3: "WEB",
	}
	ClientPlatform_Platform_value = map[string]int32{
		"UNKNOWN": 0,
		"IOS":     1,
		"ANDROID": 2,
		"WEB":     3,
	}
)

func (x ClientPlatform_Platform) Enum() *ClientPlatform_Platform {
	p := new(ClientPlatform_Platform)
	*p = x
	return p
}

func (x ClientPlatform_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientPlatform_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_device_proto_enumTypes[0].Descriptor()
}

func (ClientPlatform_Platform) Type() protoreflect.EnumType {
	return &file_spacex_api_device_device_proto_enumTypes[0]
}

func (x ClientPlatform_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientPlatform_Platform.Descriptor instead.
func (ClientPlatform_Platform) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{24, 0}
}

type ToDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*ToDevice_Request
	Message isToDevice_Message `protobuf_oneof:"message"`
}

func (x *ToDevice) Reset() {
	*x = ToDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToDevice) ProtoMessage() {}

func (x *ToDevice) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToDevice.ProtoReflect.Descriptor instead.
func (*ToDevice) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{0}
}

func (m *ToDevice) GetMessage() isToDevice_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ToDevice) GetRequest() *Request {
	if x, ok := x.GetMessage().(*ToDevice_Request); ok {
		return x.Request
	}
	return nil
}

type isToDevice_Message interface {
	isToDevice_Message()
}

type ToDevice_Request struct {
	Request *Request `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

func (*ToDevice_Request) isToDevice_Message() {}

type FromDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*FromDevice_Response
	//	*FromDevice_Event
	Message isFromDevice_Message `protobuf_oneof:"message"`
}

func (x *FromDevice) Reset() {
	*x = FromDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromDevice) ProtoMessage() {}

func (x *FromDevice) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromDevice.ProtoReflect.Descriptor instead.
func (*FromDevice) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{1}
}

func (m *FromDevice) GetMessage() isFromDevice_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *FromDevice) GetResponse() *Response {
	if x, ok := x.GetMessage().(*FromDevice_Response); ok {
		return x.Response
	}
	return nil
}

func (x *FromDevice) GetEvent() *Event {
	if x, ok := x.GetMessage().(*FromDevice_Event); ok {
		return x.Event
	}
	return nil
}

type isFromDevice_Message interface {
	isFromDevice_Message()
}

type FromDevice_Response struct {
	Response *Response `protobuf:"bytes,1,opt,name=response,proto3,oneof"`
}

type FromDevice_Event struct {
	Event *Event `protobuf:"bytes,2,opt,name=event,proto3,oneof"`
}

func (*FromDevice_Response) isFromDevice_Message() {}

func (*FromDevice_Event) isFromDevice_Message() {}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EpochId  uint64 `protobuf:"varint,14,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	TargetId string `protobuf:"bytes,13,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// Types that are assignable to Request:
	//	*Request_SignedRequest
	//	*Request_GetNextId
	//	*Request_Authenticate
	//	*Request_EnableFlow
	//	*Request_FactoryReset
	//	*Request_GetDeviceInfo
	//	*Request_GetHistory
	//	*Request_GetLog
	//	*Request_GetNetworkInterfaces
	//	*Request_GetPing
	//	*Request_PingHost
	//	*Request_GetStatus
	//	*Request_Reboot
	//	*Request_SetSku
	//	*Request_SetTrustedKeys
	//	*Request_SpeedTest
	//	*Request_Update
	//	*Request_GetLocation
	//	*Request_GetHeapDump
	//	*Request_RestartControl
	//	*Request_Fuse
	//	*Request_GetPersistentStats
	//	*Request_GetConnections
	//	*Request_FlushTelem
	//	*Request_DishStow
	//	*Request_DishGetContext
	//	*Request_DishGetObstructionMap
	//	*Request_DishSetEmc
	//	*Request_DishGetEmc
	//	*Request_TransceiverIfLoopbackTest
	//	*Request_TransceiverGetStatus
	//	*Request_TransceiverGetTelemetry
	//	*Request_WifiGetClients
	//	*Request_WifiGetDiagnostics
	//	*Request_WifiGetPingMetrics
	//	*Request_WifiSetConfig
	//	*Request_WifiGetConfig
	//	*Request_WifiSetup
	//	*Request_WifiGetNetworkConfig
	//	*Request_WifiSetMeshDeviceTrust
	Request isRequest_Request `protobuf_oneof:"request"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{2}
}

func (x *Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Request) GetEpochId() uint64 {
	if x != nil {
		return x.EpochId
	}
	return 0
}

func (x *Request) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *Request) GetSignedRequest() *SignedData {
	if x, ok := x.GetRequest().(*Request_SignedRequest); ok {
		return x.SignedRequest
	}
	return nil
}

func (x *Request) GetGetNextId() *GetNextIdRequest {
	if x, ok := x.GetRequest().(*Request_GetNextId); ok {
		return x.GetNextId
	}
	return nil
}

func (x *Request) GetAuthenticate() *AuthenticateRequest {
	if x, ok := x.GetRequest().(*Request_Authenticate); ok {
		return x.Authenticate
	}
	return nil
}

func (x *Request) GetEnableFlow() *EnableFlowRequest {
	if x, ok := x.GetRequest().(*Request_EnableFlow); ok {
		return x.EnableFlow
	}
	return nil
}

func (x *Request) GetFactoryReset() *FactoryResetRequest {
	if x, ok := x.GetRequest().(*Request_FactoryReset); ok {
		return x.FactoryReset
	}
	return nil
}

func (x *Request) GetGetDeviceInfo() *GetDeviceInfoRequest {
	if x, ok := x.GetRequest().(*Request_GetDeviceInfo); ok {
		return x.GetDeviceInfo
	}
	return nil
}

func (x *Request) GetGetHistory() *GetHistoryRequest {
	if x, ok := x.GetRequest().(*Request_GetHistory); ok {
		return x.GetHistory
	}
	return nil
}

func (x *Request) GetGetLog() *GetLogRequest {
	if x, ok := x.GetRequest().(*Request_GetLog); ok {
		return x.GetLog
	}
	return nil
}

func (x *Request) GetGetNetworkInterfaces() *GetNetworkInterfacesRequest {
	if x, ok := x.GetRequest().(*Request_GetNetworkInterfaces); ok {
		return x.GetNetworkInterfaces
	}
	return nil
}

func (x *Request) GetGetPing() *GetPingRequest {
	if x, ok := x.GetRequest().(*Request_GetPing); ok {
		return x.GetPing
	}
	return nil
}

func (x *Request) GetPingHost() *PingHostRequest {
	if x, ok := x.GetRequest().(*Request_PingHost); ok {
		return x.PingHost
	}
	return nil
}

func (x *Request) GetGetStatus() *GetStatusRequest {
	if x, ok := x.GetRequest().(*Request_GetStatus); ok {
		return x.GetStatus
	}
	return nil
}

func (x *Request) GetReboot() *RebootRequest {
	if x, ok := x.GetRequest().(*Request_Reboot); ok {
		return x.Reboot
	}
	return nil
}

func (x *Request) GetSetSku() *SetSkuRequest {
	if x, ok := x.GetRequest().(*Request_SetSku); ok {
		return x.SetSku
	}
	return nil
}

func (x *Request) GetSetTrustedKeys() *SetTrustedKeysRequest {
	if x, ok := x.GetRequest().(*Request_SetTrustedKeys); ok {
		return x.SetTrustedKeys
	}
	return nil
}

func (x *Request) GetSpeedTest() *SpeedTestRequest {
	if x, ok := x.GetRequest().(*Request_SpeedTest); ok {
		return x.SpeedTest
	}
	return nil
}

func (x *Request) GetUpdate() *UpdateRequest {
	if x, ok := x.GetRequest().(*Request_Update); ok {
		return x.Update
	}
	return nil
}

func (x *Request) GetGetLocation() *GetLocationRequest {
	if x, ok := x.GetRequest().(*Request_GetLocation); ok {
		return x.GetLocation
	}
	return nil
}

func (x *Request) GetGetHeapDump() *GetHeapDumpRequest {
	if x, ok := x.GetRequest().(*Request_GetHeapDump); ok {
		return x.GetHeapDump
	}
	return nil
}

func (x *Request) GetRestartControl() *RestartControlRequest {
	if x, ok := x.GetRequest().(*Request_RestartControl); ok {
		return x.RestartControl
	}
	return nil
}

func (x *Request) GetFuse() *FuseRequest {
	if x, ok := x.GetRequest().(*Request_Fuse); ok {
		return x.Fuse
	}
	return nil
}

func (x *Request) GetGetPersistentStats() *GetPersistentStatsRequest {
	if x, ok := x.GetRequest().(*Request_GetPersistentStats); ok {
		return x.GetPersistentStats
	}
	return nil
}

func (x *Request) GetGetConnections() *GetConnectionsRequest {
	if x, ok := x.GetRequest().(*Request_GetConnections); ok {
		return x.GetConnections
	}
	return nil
}

func (x *Request) GetFlushTelem() *FlushTelemRequest {
	if x, ok := x.GetRequest().(*Request_FlushTelem); ok {
		return x.FlushTelem
	}
	return nil
}

func (x *Request) GetDishStow() *DishStowRequest {
	if x, ok := x.GetRequest().(*Request_DishStow); ok {
		return x.DishStow
	}
	return nil
}

func (x *Request) GetDishGetContext() *DishGetContextRequest {
	if x, ok := x.GetRequest().(*Request_DishGetContext); ok {
		return x.DishGetContext
	}
	return nil
}

func (x *Request) GetDishGetObstructionMap() *DishGetObstructionMapRequest {
	if x, ok := x.GetRequest().(*Request_DishGetObstructionMap); ok {
		return x.DishGetObstructionMap
	}
	return nil
}

func (x *Request) GetDishSetEmc() *DishSetEmcRequest {
	if x, ok := x.GetRequest().(*Request_DishSetEmc); ok {
		return x.DishSetEmc
	}
	return nil
}

func (x *Request) GetDishGetEmc() *DishGetEmcRequest {
	if x, ok := x.GetRequest().(*Request_DishGetEmc); ok {
		return x.DishGetEmc
	}
	return nil
}

func (x *Request) GetTransceiverIfLoopbackTest() *TransceiverIFLoopbackTestRequest {
	if x, ok := x.GetRequest().(*Request_TransceiverIfLoopbackTest); ok {
		return x.TransceiverIfLoopbackTest
	}
	return nil
}

func (x *Request) GetTransceiverGetStatus() *TransceiverGetStatusRequest {
	if x, ok := x.GetRequest().(*Request_TransceiverGetStatus); ok {
		return x.TransceiverGetStatus
	}
	return nil
}

func (x *Request) GetTransceiverGetTelemetry() *TransceiverGetTelemetryRequest {
	if x, ok := x.GetRequest().(*Request_TransceiverGetTelemetry); ok {
		return x.TransceiverGetTelemetry
	}
	return nil
}

func (x *Request) GetWifiGetClients() *WifiGetClientsRequest {
	if x, ok := x.GetRequest().(*Request_WifiGetClients); ok {
		return x.WifiGetClients
	}
	return nil
}

func (x *Request) GetWifiGetDiagnostics() *WifiGetDiagnosticsRequest {
	if x, ok := x.GetRequest().(*Request_WifiGetDiagnostics); ok {
		return x.WifiGetDiagnostics
	}
	return nil
}

func (x *Request) GetWifiGetPingMetrics() *WifiGetPingMetricsRequest {
	if x, ok := x.GetRequest().(*Request_WifiGetPingMetrics); ok {
		return x.WifiGetPingMetrics
	}
	return nil
}

func (x *Request) GetWifiSetConfig() *WifiSetConfigRequest {
	if x, ok := x.GetRequest().(*Request_WifiSetConfig); ok {
		return x.WifiSetConfig
	}
	return nil
}

func (x *Request) GetWifiGetConfig() *WifiGetConfigRequest {
	if x, ok := x.GetRequest().(*Request_WifiGetConfig); ok {
		return x.WifiGetConfig
	}
	return nil
}

func (x *Request) GetWifiSetup() *WifiSetupRequest {
	if x, ok := x.GetRequest().(*Request_WifiSetup); ok {
		return x.WifiSetup
	}
	return nil
}

func (x *Request) GetWifiGetNetworkConfig() *WifiGetNetworkConfigRequest {
	if x, ok := x.GetRequest().(*Request_WifiGetNetworkConfig); ok {
		return x.WifiGetNetworkConfig
	}
	return nil
}

func (x *Request) GetWifiSetMeshDeviceTrust() *WifiSetMeshDeviceTrustRequest {
	if x, ok := x.GetRequest().(*Request_WifiSetMeshDeviceTrust); ok {
		return x.WifiSetMeshDeviceTrust
	}
	return nil
}

type isRequest_Request interface {
	isRequest_Request()
}

type Request_SignedRequest struct {
	SignedRequest *SignedData `protobuf:"bytes,15,opt,name=signed_request,json=signedRequest,proto3,oneof"`
}

type Request_GetNextId struct {
	GetNextId *GetNextIdRequest `protobuf:"bytes,1006,opt,name=get_next_id,json=getNextId,proto3,oneof"`
}

type Request_Authenticate struct {
	Authenticate *AuthenticateRequest `protobuf:"bytes,1005,opt,name=authenticate,proto3,oneof"`
}

type Request_EnableFlow struct {
	EnableFlow *EnableFlowRequest `protobuf:"bytes,1018,opt,name=enable_flow,json=enableFlow,proto3,oneof"`
}

type Request_FactoryReset struct {
	FactoryReset *FactoryResetRequest `protobuf:"bytes,1011,opt,name=factory_reset,json=factoryReset,proto3,oneof"`
}

type Request_GetDeviceInfo struct {
	GetDeviceInfo *GetDeviceInfoRequest `protobuf:"bytes,1008,opt,name=get_device_info,json=getDeviceInfo,proto3,oneof"`
}

type Request_GetHistory struct {
	GetHistory *GetHistoryRequest `protobuf:"bytes,1007,opt,name=get_history,json=getHistory,proto3,oneof"`
}

type Request_GetLog struct {
	GetLog *GetLogRequest `protobuf:"bytes,1012,opt,name=get_log,json=getLog,proto3,oneof"`
}

type Request_GetNetworkInterfaces struct {
	GetNetworkInterfaces *GetNetworkInterfacesRequest `protobuf:"bytes,1015,opt,name=get_network_interfaces,json=getNetworkInterfaces,proto3,oneof"`
}

type Request_GetPing struct {
	GetPing *GetPingRequest `protobuf:"bytes,1009,opt,name=get_ping,json=getPing,proto3,oneof"`
}

type Request_PingHost struct {
	PingHost *PingHostRequest `protobuf:"bytes,1016,opt,name=ping_host,json=pingHost,proto3,oneof"`
}

type Request_GetStatus struct {
	GetStatus *GetStatusRequest `protobuf:"bytes,1004,opt,name=get_status,json=getStatus,proto3,oneof"`
}

type Request_Reboot struct {
	Reboot *RebootRequest `protobuf:"bytes,1001,opt,name=reboot,proto3,oneof"`
}

type Request_SetSku struct {
	SetSku *SetSkuRequest `protobuf:"bytes,1013,opt,name=set_sku,json=setSku,proto3,oneof"`
}

type Request_SetTrustedKeys struct {
	SetTrustedKeys *SetTrustedKeysRequest `protobuf:"bytes,1010,opt,name=set_trusted_keys,json=setTrustedKeys,proto3,oneof"`
}

type Request_SpeedTest struct {
	SpeedTest *SpeedTestRequest `protobuf:"bytes,1003,opt,name=speed_test,json=speedTest,proto3,oneof"`
}

type Request_Update struct {
	Update *UpdateRequest `protobuf:"bytes,1014,opt,name=update,proto3,oneof"`
}

type Request_GetLocation struct {
	GetLocation *GetLocationRequest `protobuf:"bytes,1017,opt,name=get_location,json=getLocation,proto3,oneof"`
}

type Request_GetHeapDump struct {
	GetHeapDump *GetHeapDumpRequest `protobuf:"bytes,1019,opt,name=get_heap_dump,json=getHeapDump,proto3,oneof"`
}

type Request_RestartControl struct {
	RestartControl *RestartControlRequest `protobuf:"bytes,1020,opt,name=restart_control,json=restartControl,proto3,oneof"`
}

type Request_Fuse struct {
	Fuse *FuseRequest `protobuf:"bytes,1021,opt,name=fuse,proto3,oneof"`
}

type Request_GetPersistentStats struct {
	GetPersistentStats *GetPersistentStatsRequest `protobuf:"bytes,1022,opt,name=get_persistent_stats,json=getPersistentStats,proto3,oneof"`
}

type Request_GetConnections struct {
	GetConnections *GetConnectionsRequest `protobuf:"bytes,1023,opt,name=get_connections,json=getConnections,proto3,oneof"`
}

type Request_FlushTelem struct {
	FlushTelem *FlushTelemRequest `protobuf:"bytes,1026,opt,name=flush_telem,json=flushTelem,proto3,oneof"`
}

type Request_DishStow struct {
	DishStow *DishStowRequest `protobuf:"bytes,2002,opt,name=dish_stow,json=dishStow,proto3,oneof"`
}

type Request_DishGetContext struct {
	DishGetContext *DishGetContextRequest `protobuf:"bytes,2003,opt,name=dish_get_context,json=dishGetContext,proto3,oneof"`
}

type Request_DishGetObstructionMap struct {
	DishGetObstructionMap *DishGetObstructionMapRequest `protobuf:"bytes,2008,opt,name=dish_get_obstruction_map,json=dishGetObstructionMap,proto3,oneof"`
}

type Request_DishSetEmc struct {
	DishSetEmc *DishSetEmcRequest `protobuf:"bytes,2007,opt,name=dish_set_emc,json=dishSetEmc,proto3,oneof"`
}

type Request_DishGetEmc struct {
	DishGetEmc *DishGetEmcRequest `protobuf:"bytes,2009,opt,name=dish_get_emc,json=dishGetEmc,proto3,oneof"`
}

type Request_TransceiverIfLoopbackTest struct {
	TransceiverIfLoopbackTest *TransceiverIFLoopbackTestRequest `protobuf:"bytes,4001,opt,name=transceiver_if_loopback_test,json=transceiverIfLoopbackTest,proto3,oneof"`
}

type Request_TransceiverGetStatus struct {
	TransceiverGetStatus *TransceiverGetStatusRequest `protobuf:"bytes,4003,opt,name=transceiver_get_status,json=transceiverGetStatus,proto3,oneof"`
}

type Request_TransceiverGetTelemetry struct {
	TransceiverGetTelemetry *TransceiverGetTelemetryRequest `protobuf:"bytes,4004,opt,name=transceiver_get_telemetry,json=transceiverGetTelemetry,proto3,oneof"`
}

type Request_WifiGetClients struct {
	WifiGetClients *WifiGetClientsRequest `protobuf:"bytes,3002,opt,name=wifi_get_clients,json=wifiGetClients,proto3,oneof"`
}

type Request_WifiGetDiagnostics struct {
	WifiGetDiagnostics *WifiGetDiagnosticsRequest `protobuf:"bytes,3008,opt,name=wifi_get_diagnostics,json=wifiGetDiagnostics,proto3,oneof"`
}

type Request_WifiGetPingMetrics struct {
	WifiGetPingMetrics *WifiGetPingMetricsRequest `protobuf:"bytes,3007,opt,name=wifi_get_ping_metrics,json=wifiGetPingMetrics,proto3,oneof"`
}

type Request_WifiSetConfig struct {
	WifiSetConfig *WifiSetConfigRequest `protobuf:"bytes,3001,opt,name=wifi_set_config,json=wifiSetConfig,proto3,oneof"`
}

type Request_WifiGetConfig struct {
	WifiGetConfig *WifiGetConfigRequest `protobuf:"bytes,3009,opt,name=wifi_get_config,json=wifiGetConfig,proto3,oneof"`
}

type Request_WifiSetup struct {
	WifiSetup *WifiSetupRequest `protobuf:"bytes,3003,opt,name=wifi_setup,json=wifiSetup,proto3,oneof"`
}

type Request_WifiGetNetworkConfig struct {
	WifiGetNetworkConfig *WifiGetNetworkConfigRequest `protobuf:"bytes,3011,opt,name=wifi_get_network_config,json=wifiGetNetworkConfig,proto3,oneof"`
}

type Request_WifiSetMeshDeviceTrust struct {
	WifiSetMeshDeviceTrust *WifiSetMeshDeviceTrustRequest `protobuf:"bytes,3012,opt,name=wifi_set_mesh_device_trust,json=wifiSetMeshDeviceTrust,proto3,oneof"`
}

func (*Request_SignedRequest) isRequest_Request() {}

func (*Request_GetNextId) isRequest_Request() {}

func (*Request_Authenticate) isRequest_Request() {}

func (*Request_EnableFlow) isRequest_Request() {}

func (*Request_FactoryReset) isRequest_Request() {}

func (*Request_GetDeviceInfo) isRequest_Request() {}

func (*Request_GetHistory) isRequest_Request() {}

func (*Request_GetLog) isRequest_Request() {}

func (*Request_GetNetworkInterfaces) isRequest_Request() {}

func (*Request_GetPing) isRequest_Request() {}

func (*Request_PingHost) isRequest_Request() {}

func (*Request_GetStatus) isRequest_Request() {}

func (*Request_Reboot) isRequest_Request() {}

func (*Request_SetSku) isRequest_Request() {}

func (*Request_SetTrustedKeys) isRequest_Request() {}

func (*Request_SpeedTest) isRequest_Request() {}

func (*Request_Update) isRequest_Request() {}

func (*Request_GetLocation) isRequest_Request() {}

func (*Request_GetHeapDump) isRequest_Request() {}

func (*Request_RestartControl) isRequest_Request() {}

func (*Request_Fuse) isRequest_Request() {}

func (*Request_GetPersistentStats) isRequest_Request() {}

func (*Request_GetConnections) isRequest_Request() {}

func (*Request_FlushTelem) isRequest_Request() {}

func (*Request_DishStow) isRequest_Request() {}

func (*Request_DishGetContext) isRequest_Request() {}

func (*Request_DishGetObstructionMap) isRequest_Request() {}

func (*Request_DishSetEmc) isRequest_Request() {}

func (*Request_DishGetEmc) isRequest_Request() {}

func (*Request_TransceiverIfLoopbackTest) isRequest_Request() {}

func (*Request_TransceiverGetStatus) isRequest_Request() {}

func (*Request_TransceiverGetTelemetry) isRequest_Request() {}

func (*Request_WifiGetClients) isRequest_Request() {}

func (*Request_WifiGetDiagnostics) isRequest_Request() {}

func (*Request_WifiGetPingMetrics) isRequest_Request() {}

func (*Request_WifiSetConfig) isRequest_Request() {}

func (*Request_WifiGetConfig) isRequest_Request() {}

func (*Request_WifiSetup) isRequest_Request() {}

func (*Request_WifiGetNetworkConfig) isRequest_Request() {}

func (*Request_WifiSetMeshDeviceTrust) isRequest_Request() {}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status     *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	ApiVersion uint64         `protobuf:"varint,3,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Types that are assignable to Response:
	//	*Response_GetNextId
	//	*Response_EnableFlow
	//	*Response_FactoryReset
	//	*Response_GetDeviceInfo
	//	*Response_GetLog
	//	*Response_GetNetworkInterfaces
	//	*Response_GetPing
	//	*Response_PingHost
	//	*Response_Reboot
	//	*Response_SpeedTest
	//	*Response_SetSku
	//	*Response_SetTrustedKeys
	//	*Response_Update
	//	*Response_GetLocation
	//	*Response_GetHeapDump
	//	*Response_RestartControl
	//	*Response_Fuse
	//	*Response_GetConnections
	//	*Response_FlushTelem
	//	*Response_DishAuthenticate
	//	*Response_DishGetContext
	//	*Response_DishGetHistory
	//	*Response_DishGetStatus
	//	*Response_DishGetObstructionMap
	//	*Response_DishStow
	//	*Response_DishSetEmc
	//	*Response_DishGetEmc
	//	*Response_TransceiverIfLoopbackTest
	//	*Response_TransceiverGetStatus
	//	*Response_TransceiverGetTelemetry
	//	*Response_WifiAuthenticate
	//	*Response_WifiGetClients
	//	*Response_WifiGetDiagnostics
	//	*Response_WifiGetHistory
	//	*Response_WifiGetPingMetrics
	//	*Response_WifiGetStatus
	//	*Response_WifiSetConfig
	//	*Response_WifiGetConfig
	//	*Response_WifiSetup
	//	*Response_WifiGetPersistentStats
	//	*Response_WifiGetNetworkConfig
	//	*Response_WifiSetMeshDeviceTrust
	Response isResponse_Response `protobuf_oneof:"response"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Response) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Response) GetApiVersion() uint64 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *Response) GetGetNextId() *GetNextIdResponse {
	if x, ok := x.GetResponse().(*Response_GetNextId); ok {
		return x.GetNextId
	}
	return nil
}

func (x *Response) GetEnableFlow() *EnableFlowResponse {
	if x, ok := x.GetResponse().(*Response_EnableFlow); ok {
		return x.EnableFlow
	}
	return nil
}

func (x *Response) GetFactoryReset() *FactoryResetResponse {
	if x, ok := x.GetResponse().(*Response_FactoryReset); ok {
		return x.FactoryReset
	}
	return nil
}

func (x *Response) GetGetDeviceInfo() *GetDeviceInfoResponse {
	if x, ok := x.GetResponse().(*Response_GetDeviceInfo); ok {
		return x.GetDeviceInfo
	}
	return nil
}

func (x *Response) GetGetLog() *GetLogResponse {
	if x, ok := x.GetResponse().(*Response_GetLog); ok {
		return x.GetLog
	}
	return nil
}

func (x *Response) GetGetNetworkInterfaces() *GetNetworkInterfacesResponse {
	if x, ok := x.GetResponse().(*Response_GetNetworkInterfaces); ok {
		return x.GetNetworkInterfaces
	}
	return nil
}

func (x *Response) GetGetPing() *GetPingResponse {
	if x, ok := x.GetResponse().(*Response_GetPing); ok {
		return x.GetPing
	}
	return nil
}

func (x *Response) GetPingHost() *PingHostResponse {
	if x, ok := x.GetResponse().(*Response_PingHost); ok {
		return x.PingHost
	}
	return nil
}

func (x *Response) GetReboot() *RebootResponse {
	if x, ok := x.GetResponse().(*Response_Reboot); ok {
		return x.Reboot
	}
	return nil
}

func (x *Response) GetSpeedTest() *SpeedTestResponse {
	if x, ok := x.GetResponse().(*Response_SpeedTest); ok {
		return x.SpeedTest
	}
	return nil
}

func (x *Response) GetSetSku() *SetSkuResponse {
	if x, ok := x.GetResponse().(*Response_SetSku); ok {
		return x.SetSku
	}
	return nil
}

func (x *Response) GetSetTrustedKeys() *SetTrustedKeysResponse {
	if x, ok := x.GetResponse().(*Response_SetTrustedKeys); ok {
		return x.SetTrustedKeys
	}
	return nil
}

func (x *Response) GetUpdate() *UpdateResponse {
	if x, ok := x.GetResponse().(*Response_Update); ok {
		return x.Update
	}
	return nil
}

func (x *Response) GetGetLocation() *GetLocationResponse {
	if x, ok := x.GetResponse().(*Response_GetLocation); ok {
		return x.GetLocation
	}
	return nil
}

func (x *Response) GetGetHeapDump() *GetHeapDumpResponse {
	if x, ok := x.GetResponse().(*Response_GetHeapDump); ok {
		return x.GetHeapDump
	}
	return nil
}

func (x *Response) GetRestartControl() *RestartControlResponse {
	if x, ok := x.GetResponse().(*Response_RestartControl); ok {
		return x.RestartControl
	}
	return nil
}

func (x *Response) GetFuse() *FuseResponse {
	if x, ok := x.GetResponse().(*Response_Fuse); ok {
		return x.Fuse
	}
	return nil
}

func (x *Response) GetGetConnections() *GetConnectionsResponse {
	if x, ok := x.GetResponse().(*Response_GetConnections); ok {
		return x.GetConnections
	}
	return nil
}

func (x *Response) GetFlushTelem() *FlushTelemResponse {
	if x, ok := x.GetResponse().(*Response_FlushTelem); ok {
		return x.FlushTelem
	}
	return nil
}

func (x *Response) GetDishAuthenticate() *DishAuthenticateResponse {
	if x, ok := x.GetResponse().(*Response_DishAuthenticate); ok {
		return x.DishAuthenticate
	}
	return nil
}

func (x *Response) GetDishGetContext() *DishGetContextResponse {
	if x, ok := x.GetResponse().(*Response_DishGetContext); ok {
		return x.DishGetContext
	}
	return nil
}

func (x *Response) GetDishGetHistory() *DishGetHistoryResponse {
	if x, ok := x.GetResponse().(*Response_DishGetHistory); ok {
		return x.DishGetHistory
	}
	return nil
}

func (x *Response) GetDishGetStatus() *DishGetStatusResponse {
	if x, ok := x.GetResponse().(*Response_DishGetStatus); ok {
		return x.DishGetStatus
	}
	return nil
}

func (x *Response) GetDishGetObstructionMap() *DishGetObstructionMapResponse {
	if x, ok := x.GetResponse().(*Response_DishGetObstructionMap); ok {
		return x.DishGetObstructionMap
	}
	return nil
}

func (x *Response) GetDishStow() *DishStowResponse {
	if x, ok := x.GetResponse().(*Response_DishStow); ok {
		return x.DishStow
	}
	return nil
}

func (x *Response) GetDishSetEmc() *DishSetEmcResponse {
	if x, ok := x.GetResponse().(*Response_DishSetEmc); ok {
		return x.DishSetEmc
	}
	return nil
}

func (x *Response) GetDishGetEmc() *DishGetEmcResponse {
	if x, ok := x.GetResponse().(*Response_DishGetEmc); ok {
		return x.DishGetEmc
	}
	return nil
}

func (x *Response) GetTransceiverIfLoopbackTest() *TransceiverIFLoopbackTestResponse {
	if x, ok := x.GetResponse().(*Response_TransceiverIfLoopbackTest); ok {
		return x.TransceiverIfLoopbackTest
	}
	return nil
}

func (x *Response) GetTransceiverGetStatus() *TransceiverGetStatusResponse {
	if x, ok := x.GetResponse().(*Response_TransceiverGetStatus); ok {
		return x.TransceiverGetStatus
	}
	return nil
}

func (x *Response) GetTransceiverGetTelemetry() *TransceiverGetTelemetryResponse {
	if x, ok := x.GetResponse().(*Response_TransceiverGetTelemetry); ok {
		return x.TransceiverGetTelemetry
	}
	return nil
}

func (x *Response) GetWifiAuthenticate() *WifiAuthenticateResponse {
	if x, ok := x.GetResponse().(*Response_WifiAuthenticate); ok {
		return x.WifiAuthenticate
	}
	return nil
}

func (x *Response) GetWifiGetClients() *WifiGetClientsResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetClients); ok {
		return x.WifiGetClients
	}
	return nil
}

func (x *Response) GetWifiGetDiagnostics() *WifiGetDiagnosticsResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetDiagnostics); ok {
		return x.WifiGetDiagnostics
	}
	return nil
}

func (x *Response) GetWifiGetHistory() *WifiGetHistoryResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetHistory); ok {
		return x.WifiGetHistory
	}
	return nil
}

func (x *Response) GetWifiGetPingMetrics() *WifiGetPingMetricsResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetPingMetrics); ok {
		return x.WifiGetPingMetrics
	}
	return nil
}

func (x *Response) GetWifiGetStatus() *WifiGetStatusResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetStatus); ok {
		return x.WifiGetStatus
	}
	return nil
}

func (x *Response) GetWifiSetConfig() *WifiSetConfigResponse {
	if x, ok := x.GetResponse().(*Response_WifiSetConfig); ok {
		return x.WifiSetConfig
	}
	return nil
}

func (x *Response) GetWifiGetConfig() *WifiGetConfigResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetConfig); ok {
		return x.WifiGetConfig
	}
	return nil
}

func (x *Response) GetWifiSetup() *WifiSetupResponse {
	if x, ok := x.GetResponse().(*Response_WifiSetup); ok {
		return x.WifiSetup
	}
	return nil
}

func (x *Response) GetWifiGetPersistentStats() *WifiGetPersistentStatsResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetPersistentStats); ok {
		return x.WifiGetPersistentStats
	}
	return nil
}

func (x *Response) GetWifiGetNetworkConfig() *WifiGetNetworkConfigResponse {
	if x, ok := x.GetResponse().(*Response_WifiGetNetworkConfig); ok {
		return x.WifiGetNetworkConfig
	}
	return nil
}

func (x *Response) GetWifiSetMeshDeviceTrust() *WifiSetMeshDeviceTrustResponse {
	if x, ok := x.GetResponse().(*Response_WifiSetMeshDeviceTrust); ok {
		return x.WifiSetMeshDeviceTrust
	}
	return nil
}

type isResponse_Response interface {
	isResponse_Response()
}

type Response_GetNextId struct {
	GetNextId *GetNextIdResponse `protobuf:"bytes,1006,opt,name=get_next_id,json=getNextId,proto3,oneof"`
}

type Response_EnableFlow struct {
	EnableFlow *EnableFlowResponse `protobuf:"bytes,1018,opt,name=enable_flow,json=enableFlow,proto3,oneof"`
}

type Response_FactoryReset struct {
	FactoryReset *FactoryResetResponse `protobuf:"bytes,1011,opt,name=factory_reset,json=factoryReset,proto3,oneof"`
}

type Response_GetDeviceInfo struct {
	GetDeviceInfo *GetDeviceInfoResponse `protobuf:"bytes,1004,opt,name=get_device_info,json=getDeviceInfo,proto3,oneof"`
}

type Response_GetLog struct {
	GetLog *GetLogResponse `protobuf:"bytes,1012,opt,name=get_log,json=getLog,proto3,oneof"`
}

type Response_GetNetworkInterfaces struct {
	GetNetworkInterfaces *GetNetworkInterfacesResponse `protobuf:"bytes,1015,opt,name=get_network_interfaces,json=getNetworkInterfaces,proto3,oneof"`
}

type Response_GetPing struct {
	GetPing *GetPingResponse `protobuf:"bytes,1009,opt,name=get_ping,json=getPing,proto3,oneof"`
}

type Response_PingHost struct {
	PingHost *PingHostResponse `protobuf:"bytes,1016,opt,name=ping_host,json=pingHost,proto3,oneof"`
}

type Response_Reboot struct {
	Reboot *RebootResponse `protobuf:"bytes,1001,opt,name=reboot,proto3,oneof"`
}

type Response_SpeedTest struct {
	SpeedTest *SpeedTestResponse `protobuf:"bytes,1003,opt,name=speed_test,json=speedTest,proto3,oneof"`
}

type Response_SetSku struct {
	SetSku *SetSkuResponse `protobuf:"bytes,1013,opt,name=set_sku,json=setSku,proto3,oneof"`
}

type Response_SetTrustedKeys struct {
	SetTrustedKeys *SetTrustedKeysResponse `protobuf:"bytes,1010,opt,name=set_trusted_keys,json=setTrustedKeys,proto3,oneof"`
}

type Response_Update struct {
	Update *UpdateResponse `protobuf:"bytes,1014,opt,name=update,proto3,oneof"`
}

type Response_GetLocation struct {
	GetLocation *GetLocationResponse `protobuf:"bytes,1017,opt,name=get_location,json=getLocation,proto3,oneof"`
}

type Response_GetHeapDump struct {
	GetHeapDump *GetHeapDumpResponse `protobuf:"bytes,1019,opt,name=get_heap_dump,json=getHeapDump,proto3,oneof"`
}

type Response_RestartControl struct {
	RestartControl *RestartControlResponse `protobuf:"bytes,1020,opt,name=restart_control,json=restartControl,proto3,oneof"`
}

type Response_Fuse struct {
	Fuse *FuseResponse `protobuf:"bytes,1021,opt,name=fuse,proto3,oneof"`
}

type Response_GetConnections struct {
	GetConnections *GetConnectionsResponse `protobuf:"bytes,1023,opt,name=get_connections,json=getConnections,proto3,oneof"`
}

type Response_FlushTelem struct {
	FlushTelem *FlushTelemResponse `protobuf:"bytes,1026,opt,name=flush_telem,json=flushTelem,proto3,oneof"`
}

type Response_DishAuthenticate struct {
	DishAuthenticate *DishAuthenticateResponse `protobuf:"bytes,2005,opt,name=dish_authenticate,json=dishAuthenticate,proto3,oneof"`
}

type Response_DishGetContext struct {
	DishGetContext *DishGetContextResponse `protobuf:"bytes,2003,opt,name=dish_get_context,json=dishGetContext,proto3,oneof"`
}

type Response_DishGetHistory struct {
	DishGetHistory *DishGetHistoryResponse `protobuf:"bytes,2006,opt,name=dish_get_history,json=dishGetHistory,proto3,oneof"`
}

type Response_DishGetStatus struct {
	DishGetStatus *DishGetStatusResponse `protobuf:"bytes,2004,opt,name=dish_get_status,json=dishGetStatus,proto3,oneof"`
}

type Response_DishGetObstructionMap struct {
	DishGetObstructionMap *DishGetObstructionMapResponse `protobuf:"bytes,2008,opt,name=dish_get_obstruction_map,json=dishGetObstructionMap,proto3,oneof"`
}

type Response_DishStow struct {
	DishStow *DishStowResponse `protobuf:"bytes,2002,opt,name=dish_stow,json=dishStow,proto3,oneof"`
}

type Response_DishSetEmc struct {
	DishSetEmc *DishSetEmcResponse `protobuf:"bytes,2007,opt,name=dish_set_emc,json=dishSetEmc,proto3,oneof"`
}

type Response_DishGetEmc struct {
	DishGetEmc *DishGetEmcResponse `protobuf:"bytes,2009,opt,name=dish_get_emc,json=dishGetEmc,proto3,oneof"`
}

type Response_TransceiverIfLoopbackTest struct {
	TransceiverIfLoopbackTest *TransceiverIFLoopbackTestResponse `protobuf:"bytes,4001,opt,name=transceiver_if_loopback_test,json=transceiverIfLoopbackTest,proto3,oneof"`
}

type Response_TransceiverGetStatus struct {
	TransceiverGetStatus *TransceiverGetStatusResponse `protobuf:"bytes,4003,opt,name=transceiver_get_status,json=transceiverGetStatus,proto3,oneof"`
}

type Response_TransceiverGetTelemetry struct {
	TransceiverGetTelemetry *TransceiverGetTelemetryResponse `protobuf:"bytes,4004,opt,name=transceiver_get_telemetry,json=transceiverGetTelemetry,proto3,oneof"`
}

type Response_WifiAuthenticate struct {
	WifiAuthenticate *WifiAuthenticateResponse `protobuf:"bytes,3005,opt,name=wifi_authenticate,json=wifiAuthenticate,proto3,oneof"`
}

type Response_WifiGetClients struct {
	WifiGetClients *WifiGetClientsResponse `protobuf:"bytes,3002,opt,name=wifi_get_clients,json=wifiGetClients,proto3,oneof"`
}

type Response_WifiGetDiagnostics struct {
	WifiGetDiagnostics *WifiGetDiagnosticsResponse `protobuf:"bytes,3008,opt,name=wifi_get_diagnostics,json=wifiGetDiagnostics,proto3,oneof"`
}

type Response_WifiGetHistory struct {
	WifiGetHistory *WifiGetHistoryResponse `protobuf:"bytes,3006,opt,name=wifi_get_history,json=wifiGetHistory,proto3,oneof"`
}

type Response_WifiGetPingMetrics struct {
	WifiGetPingMetrics *WifiGetPingMetricsResponse `protobuf:"bytes,3007,opt,name=wifi_get_ping_metrics,json=wifiGetPingMetrics,proto3,oneof"`
}

type Response_WifiGetStatus struct {
	WifiGetStatus *WifiGetStatusResponse `protobuf:"bytes,3004,opt,name=wifi_get_status,json=wifiGetStatus,proto3,oneof"`
}

type Response_WifiSetConfig struct {
	WifiSetConfig *WifiSetConfigResponse `protobuf:"bytes,3001,opt,name=wifi_set_config,json=wifiSetConfig,proto3,oneof"`
}

type Response_WifiGetConfig struct {
	WifiGetConfig *WifiGetConfigResponse `protobuf:"bytes,3009,opt,name=wifi_get_config,json=wifiGetConfig,proto3,oneof"`
}

type Response_WifiSetup struct {
	WifiSetup *WifiSetupResponse `protobuf:"bytes,3003,opt,name=wifi_setup,json=wifiSetup,proto3,oneof"`
}

type Response_WifiGetPersistentStats struct {
	WifiGetPersistentStats *WifiGetPersistentStatsResponse `protobuf:"bytes,3022,opt,name=wifi_get_persistent_stats,json=wifiGetPersistentStats,proto3,oneof"`
}

type Response_WifiGetNetworkConfig struct {
	WifiGetNetworkConfig *WifiGetNetworkConfigResponse `protobuf:"bytes,3011,opt,name=wifi_get_network_config,json=wifiGetNetworkConfig,proto3,oneof"`
}

type Response_WifiSetMeshDeviceTrust struct {
	WifiSetMeshDeviceTrust *WifiSetMeshDeviceTrustResponse `protobuf:"bytes,3012,opt,name=wifi_set_mesh_device_trust,json=wifiSetMeshDeviceTrust,proto3,oneof"`
}

func (*Response_GetNextId) isResponse_Response() {}

func (*Response_EnableFlow) isResponse_Response() {}

func (*Response_FactoryReset) isResponse_Response() {}

func (*Response_GetDeviceInfo) isResponse_Response() {}

func (*Response_GetLog) isResponse_Response() {}

func (*Response_GetNetworkInterfaces) isResponse_Response() {}

func (*Response_GetPing) isResponse_Response() {}

func (*Response_PingHost) isResponse_Response() {}

func (*Response_Reboot) isResponse_Response() {}

func (*Response_SpeedTest) isResponse_Response() {}

func (*Response_SetSku) isResponse_Response() {}

func (*Response_SetTrustedKeys) isResponse_Response() {}

func (*Response_Update) isResponse_Response() {}

func (*Response_GetLocation) isResponse_Response() {}

func (*Response_GetHeapDump) isResponse_Response() {}

func (*Response_RestartControl) isResponse_Response() {}

func (*Response_Fuse) isResponse_Response() {}

func (*Response_GetConnections) isResponse_Response() {}

func (*Response_FlushTelem) isResponse_Response() {}

func (*Response_DishAuthenticate) isResponse_Response() {}

func (*Response_DishGetContext) isResponse_Response() {}

func (*Response_DishGetHistory) isResponse_Response() {}

func (*Response_DishGetStatus) isResponse_Response() {}

func (*Response_DishGetObstructionMap) isResponse_Response() {}

func (*Response_DishStow) isResponse_Response() {}

func (*Response_DishSetEmc) isResponse_Response() {}

func (*Response_DishGetEmc) isResponse_Response() {}

func (*Response_TransceiverIfLoopbackTest) isResponse_Response() {}

func (*Response_TransceiverGetStatus) isResponse_Response() {}

func (*Response_TransceiverGetTelemetry) isResponse_Response() {}

func (*Response_WifiAuthenticate) isResponse_Response() {}

func (*Response_WifiGetClients) isResponse_Response() {}

func (*Response_WifiGetDiagnostics) isResponse_Response() {}

func (*Response_WifiGetHistory) isResponse_Response() {}

func (*Response_WifiGetPingMetrics) isResponse_Response() {}

func (*Response_WifiGetStatus) isResponse_Response() {}

func (*Response_WifiSetConfig) isResponse_Response() {}

func (*Response_WifiGetConfig) isResponse_Response() {}

func (*Response_WifiSetup) isResponse_Response() {}

func (*Response_WifiGetPersistentStats) isResponse_Response() {}

func (*Response_WifiGetNetworkConfig) isResponse_Response() {}

func (*Response_WifiSetMeshDeviceTrust) isResponse_Response() {}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*Event_WifiNewClientConnected
	//	*Event_WifiAccountBonding
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{4}
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetWifiNewClientConnected() *WifiNewClientConnectedEvent {
	if x, ok := x.GetEvent().(*Event_WifiNewClientConnected); ok {
		return x.WifiNewClientConnected
	}
	return nil
}

func (x *Event) GetWifiAccountBonding() *WifiAccountBondingEvent {
	if x, ok := x.GetEvent().(*Event_WifiAccountBonding); ok {
		return x.WifiAccountBonding
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_WifiNewClientConnected struct {
	WifiNewClientConnected *WifiNewClientConnectedEvent `protobuf:"bytes,3001,opt,name=wifi_new_client_connected,json=wifiNewClientConnected,proto3,oneof"`
}

type Event_WifiAccountBonding struct {
	WifiAccountBonding *WifiAccountBondingEvent `protobuf:"bytes,3002,opt,name=wifi_account_bonding,json=wifiAccountBonding,proto3,oneof"`
}

func (*Event_WifiNewClientConnected) isEvent_Event() {}

func (*Event_WifiAccountBonding) isEvent_Event() {}

type EnableFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DurationH uint32 `protobuf:"varint,2,opt,name=duration_h,json=durationH,proto3" json:"duration_h,omitempty"`
}

func (x *EnableFlowRequest) Reset() {
	*x = EnableFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableFlowRequest) ProtoMessage() {}

func (x *EnableFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableFlowRequest.ProtoReflect.Descriptor instead.
func (*EnableFlowRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{5}
}

func (x *EnableFlowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnableFlowRequest) GetDurationH() uint32 {
	if x != nil {
		return x.DurationH
	}
	return 0
}

type EnableFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableFlowResponse) Reset() {
	*x = EnableFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableFlowResponse) ProtoMessage() {}

func (x *EnableFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableFlowResponse.ProtoReflect.Descriptor instead.
func (*EnableFlowResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{6}
}

type FlushTelemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlushTelemRequest) Reset() {
	*x = FlushTelemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushTelemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTelemRequest) ProtoMessage() {}

func (x *FlushTelemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTelemRequest.ProtoReflect.Descriptor instead.
func (*FlushTelemRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{7}
}

type FlushTelemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlushTelemResponse) Reset() {
	*x = FlushTelemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushTelemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTelemResponse) ProtoMessage() {}

func (x *FlushTelemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTelemResponse.ProtoReflect.Descriptor instead.
func (*FlushTelemResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{8}
}

type FactoryResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FactoryResetRequest) Reset() {
	*x = FactoryResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoryResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoryResetRequest) ProtoMessage() {}

func (x *FactoryResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoryResetRequest.ProtoReflect.Descriptor instead.
func (*FactoryResetRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{9}
}

type FactoryResetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FactoryResetResponse) Reset() {
	*x = FactoryResetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoryResetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoryResetResponse) ProtoMessage() {}

func (x *FactoryResetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoryResetResponse.ProtoReflect.Descriptor instead.
func (*FactoryResetResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{10}
}

type FuseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FuseRequest) Reset() {
	*x = FuseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuseRequest) ProtoMessage() {}

func (x *FuseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuseRequest.ProtoReflect.Descriptor instead.
func (*FuseRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{11}
}

type FuseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FuseResponse) Reset() {
	*x = FuseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuseResponse) ProtoMessage() {}

func (x *FuseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuseResponse.ProtoReflect.Descriptor instead.
func (*FuseResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{12}
}

type GetHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHistoryRequest) Reset() {
	*x = GetHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryRequest) ProtoMessage() {}

func (x *GetHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetHistoryRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{13}
}

type GetLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLogRequest) Reset() {
	*x = GetLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogRequest) ProtoMessage() {}

func (x *GetLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogRequest.ProtoReflect.Descriptor instead.
func (*GetLogRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{14}
}

type GetLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Syslog     string `protobuf:"bytes,1,opt,name=syslog,proto3" json:"syslog,omitempty"`
	OfflineLog string `protobuf:"bytes,2,opt,name=offline_log,json=offlineLog,proto3" json:"offline_log,omitempty"`
}

func (x *GetLogResponse) Reset() {
	*x = GetLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogResponse) ProtoMessage() {}

func (x *GetLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogResponse.ProtoReflect.Descriptor instead.
func (*GetLogResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{15}
}

func (x *GetLogResponse) GetSyslog() string {
	if x != nil {
		return x.Syslog
	}
	return ""
}

func (x *GetLogResponse) GetOfflineLog() string {
	if x != nil {
		return x.OfflineLog
	}
	return ""
}

type GetPingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPingRequest) Reset() {
	*x = GetPingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPingRequest) ProtoMessage() {}

func (x *GetPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPingRequest.ProtoReflect.Descriptor instead.
func (*GetPingRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{16}
}

type GetPingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]*PingResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetPingResponse) Reset() {
	*x = GetPingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPingResponse) ProtoMessage() {}

func (x *GetPingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPingResponse.ProtoReflect.Descriptor instead.
func (*GetPingResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{17}
}

func (x *GetPingResponse) GetResults() map[string]*PingResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type PingHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *PingHostRequest) Reset() {
	*x = PingHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingHostRequest) ProtoMessage() {}

func (x *PingHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingHostRequest.ProtoReflect.Descriptor instead.
func (*PingHostRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{18}
}

func (x *PingHostRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type PingHostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *PingResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PingHostResponse) Reset() {
	*x = PingHostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingHostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingHostResponse) ProtoMessage() {}

func (x *PingHostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingHostResponse.ProtoReflect.Descriptor instead.
func (*PingHostResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{19}
}

func (x *PingHostResponse) GetResult() *PingResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{20}
}

type RebootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebootRequest) Reset() {
	*x = RebootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootRequest) ProtoMessage() {}

func (x *RebootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootRequest.ProtoReflect.Descriptor instead.
func (*RebootRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{21}
}

type RebootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebootResponse) Reset() {
	*x = RebootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootResponse) ProtoMessage() {}

func (x *RebootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootResponse.ProtoReflect.Descriptor instead.
func (*RebootResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{22}
}

type SpeedTestStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime    uint64  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	UploadMbps   float32 `protobuf:"fixed32,1,opt,name=upload_mbps,json=uploadMbps,proto3" json:"upload_mbps,omitempty"`
	DownloadMbps float32 `protobuf:"fixed32,2,opt,name=download_mbps,json=downloadMbps,proto3" json:"download_mbps,omitempty"`
	LatencyMs    float32 `protobuf:"fixed32,3,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
}

func (x *SpeedTestStats) Reset() {
	*x = SpeedTestStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedTestStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedTestStats) ProtoMessage() {}

func (x *SpeedTestStats) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedTestStats.ProtoReflect.Descriptor instead.
func (*SpeedTestStats) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{23}
}

func (x *SpeedTestStats) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SpeedTestStats) GetUploadMbps() float32 {
	if x != nil {
		return x.UploadMbps
	}
	return 0
}

func (x *SpeedTestStats) GetDownloadMbps() float32 {
	if x != nil {
		return x.DownloadMbps
	}
	return 0
}

func (x *SpeedTestStats) GetLatencyMs() float32 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

type ClientPlatform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform     ClientPlatform_Platform `protobuf:"varint,1,opt,name=platform,proto3,enum=SpaceX.API.Device.ClientPlatform_Platform" json:"platform,omitempty"`
	MajorVersion float32                 `protobuf:"fixed32,2,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	MinorVersion float32                 `protobuf:"fixed32,3,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
}

func (x *ClientPlatform) Reset() {
	*x = ClientPlatform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientPlatform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPlatform) ProtoMessage() {}

func (x *ClientPlatform) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPlatform.ProtoReflect.Descriptor instead.
func (*ClientPlatform) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{24}
}

func (x *ClientPlatform) GetPlatform() ClientPlatform_Platform {
	if x != nil {
		return x.Platform
	}
	return ClientPlatform_UNKNOWN
}

func (x *ClientPlatform) GetMajorVersion() float32 {
	if x != nil {
		return x.MajorVersion
	}
	return 0
}

func (x *ClientPlatform) GetMinorVersion() float32 {
	if x != nil {
		return x.MinorVersion
	}
	return 0
}

type SpeedTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSpeedtest *SpeedTestStats `protobuf:"bytes,1,opt,name=client_speedtest,json=clientSpeedtest,proto3" json:"client_speedtest,omitempty"`
	ClientRssi      float32         `protobuf:"fixed32,2,opt,name=client_rssi,json=clientRssi,proto3" json:"client_rssi,omitempty"`
	ClientPlatform  *ClientPlatform `protobuf:"bytes,3,opt,name=client_platform,json=clientPlatform,proto3" json:"client_platform,omitempty"`
}

func (x *SpeedTestRequest) Reset() {
	*x = SpeedTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedTestRequest) ProtoMessage() {}

func (x *SpeedTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedTestRequest.ProtoReflect.Descriptor instead.
func (*SpeedTestRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{25}
}

func (x *SpeedTestRequest) GetClientSpeedtest() *SpeedTestStats {
	if x != nil {
		return x.ClientSpeedtest
	}
	return nil
}

func (x *SpeedTestRequest) GetClientRssi() float32 {
	if x != nil {
		return x.ClientRssi
	}
	return 0
}

func (x *SpeedTestRequest) GetClientPlatform() *ClientPlatform {
	if x != nil {
		return x.ClientPlatform
	}
	return nil
}

type SpeedTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	DownloadBps float32 `protobuf:"fixed32,1,opt,name=download_bps,json=downloadBps,proto3" json:"download_bps,omitempty"`
	// Deprecated: Do not use.
	UploadBps float32 `protobuf:"fixed32,2,opt,name=upload_bps,json=uploadBps,proto3" json:"upload_bps,omitempty"`
	// Deprecated: Do not use.
	LatencyS float32 `protobuf:"fixed32,3,opt,name=latency_s,json=latencyS,proto3" json:"latency_s,omitempty"`
	// Deprecated: Do not use.
	DownloadMbps float32 `protobuf:"fixed32,4,opt,name=download_mbps,json=downloadMbps,proto3" json:"download_mbps,omitempty"`
	// Deprecated: Do not use.
	UploadMbps float32 `protobuf:"fixed32,5,opt,name=upload_mbps,json=uploadMbps,proto3" json:"upload_mbps,omitempty"`
	// Deprecated: Do not use.
	LatencyMs              float32         `protobuf:"fixed32,6,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
	RouterSpeedtest        *SpeedTestStats `protobuf:"bytes,15,opt,name=router_speedtest,json=routerSpeedtest,proto3" json:"router_speedtest,omitempty"`
	DownloadMbps_1TcpConn  float32         `protobuf:"fixed32,7,opt,name=download_mbps_1_tcp_conn,json=downloadMbps1TcpConn,proto3" json:"download_mbps_1_tcp_conn,omitempty"`
	UploadMbps_1TcpConn    float32         `protobuf:"fixed32,8,opt,name=upload_mbps_1_tcp_conn,json=uploadMbps1TcpConn,proto3" json:"upload_mbps_1_tcp_conn,omitempty"`
	DownloadMbps_4TcpConn  float32         `protobuf:"fixed32,9,opt,name=download_mbps_4_tcp_conn,json=downloadMbps4TcpConn,proto3" json:"download_mbps_4_tcp_conn,omitempty"`
	UploadMbps_4TcpConn    float32         `protobuf:"fixed32,10,opt,name=upload_mbps_4_tcp_conn,json=uploadMbps4TcpConn,proto3" json:"upload_mbps_4_tcp_conn,omitempty"`
	DownloadMbps_16TcpConn float32         `protobuf:"fixed32,11,opt,name=download_mbps_16_tcp_conn,json=downloadMbps16TcpConn,proto3" json:"download_mbps_16_tcp_conn,omitempty"`
	UploadMbps_16TcpConn   float32         `protobuf:"fixed32,12,opt,name=upload_mbps_16_tcp_conn,json=uploadMbps16TcpConn,proto3" json:"upload_mbps_16_tcp_conn,omitempty"`
	DownloadMbps_64TcpConn float32         `protobuf:"fixed32,13,opt,name=download_mbps_64_tcp_conn,json=downloadMbps64TcpConn,proto3" json:"download_mbps_64_tcp_conn,omitempty"`
	UploadMbps_64TcpConn   float32         `protobuf:"fixed32,14,opt,name=upload_mbps_64_tcp_conn,json=uploadMbps64TcpConn,proto3" json:"upload_mbps_64_tcp_conn,omitempty"`
}

func (x *SpeedTestResponse) Reset() {
	*x = SpeedTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeedTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedTestResponse) ProtoMessage() {}

func (x *SpeedTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedTestResponse.ProtoReflect.Descriptor instead.
func (*SpeedTestResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{26}
}

// Deprecated: Do not use.
func (x *SpeedTestResponse) GetDownloadBps() float32 {
	if x != nil {
		return x.DownloadBps
	}
	return 0
}

// Deprecated: Do not use.
func (x *SpeedTestResponse) GetUploadBps() float32 {
	if x != nil {
		return x.UploadBps
	}
	return 0
}

// Deprecated: Do not use.
func (x *SpeedTestResponse) GetLatencyS() float32 {
	if x != nil {
		return x.LatencyS
	}
	return 0
}

// Deprecated: Do not use.
func (x *SpeedTestResponse) GetDownloadMbps() float32 {
	if x != nil {
		return x.DownloadMbps
	}
	return 0
}

// Deprecated: Do not use.
func (x *SpeedTestResponse) GetUploadMbps() float32 {
	if x != nil {
		return x.UploadMbps
	}
	return 0
}

// Deprecated: Do not use.
func (x *SpeedTestResponse) GetLatencyMs() float32 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

func (x *SpeedTestResponse) GetRouterSpeedtest() *SpeedTestStats {
	if x != nil {
		return x.RouterSpeedtest
	}
	return nil
}

func (x *SpeedTestResponse) GetDownloadMbps_1TcpConn() float32 {
	if x != nil {
		return x.DownloadMbps_1TcpConn
	}
	return 0
}

func (x *SpeedTestResponse) GetUploadMbps_1TcpConn() float32 {
	if x != nil {
		return x.UploadMbps_1TcpConn
	}
	return 0
}

func (x *SpeedTestResponse) GetDownloadMbps_4TcpConn() float32 {
	if x != nil {
		return x.DownloadMbps_4TcpConn
	}
	return 0
}

func (x *SpeedTestResponse) GetUploadMbps_4TcpConn() float32 {
	if x != nil {
		return x.UploadMbps_4TcpConn
	}
	return 0
}

func (x *SpeedTestResponse) GetDownloadMbps_16TcpConn() float32 {
	if x != nil {
		return x.DownloadMbps_16TcpConn
	}
	return 0
}

func (x *SpeedTestResponse) GetUploadMbps_16TcpConn() float32 {
	if x != nil {
		return x.UploadMbps_16TcpConn
	}
	return 0
}

func (x *SpeedTestResponse) GetDownloadMbps_64TcpConn() float32 {
	if x != nil {
		return x.DownloadMbps_64TcpConn
	}
	return 0
}

func (x *SpeedTestResponse) GetUploadMbps_64TcpConn() float32 {
	if x != nil {
		return x.UploadMbps_64TcpConn
	}
	return 0
}

type GetConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConnectionsRequest) Reset() {
	*x = GetConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionsRequest) ProtoMessage() {}

func (x *GetConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{27}
}

type GetConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services map[string]*GetConnectionsResponse_ServiceConnection `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetConnectionsResponse) Reset() {
	*x = GetConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionsResponse) ProtoMessage() {}

func (x *GetConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionsResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{28}
}

func (x *GetConnectionsResponse) GetServices() map[string]*GetConnectionsResponse_ServiceConnection {
	if x != nil {
		return x.Services
	}
	return nil
}

type GetDeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDeviceInfoRequest) Reset() {
	*x = GetDeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfoRequest) ProtoMessage() {}

func (x *GetDeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{29}
}

type GetDeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInfo *DeviceInfo `protobuf:"bytes,1,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
}

func (x *GetDeviceInfoResponse) Reset() {
	*x = GetDeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfoResponse) ProtoMessage() {}

func (x *GetDeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{30}
}

func (x *GetDeviceInfoResponse) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

type SetTrustedKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*PublicKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *SetTrustedKeysRequest) Reset() {
	*x = SetTrustedKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrustedKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrustedKeysRequest) ProtoMessage() {}

func (x *SetTrustedKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrustedKeysRequest.ProtoReflect.Descriptor instead.
func (*SetTrustedKeysRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{31}
}

func (x *SetTrustedKeysRequest) GetKeys() []*PublicKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type SetTrustedKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTrustedKeysResponse) Reset() {
	*x = SetTrustedKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrustedKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrustedKeysResponse) ProtoMessage() {}

func (x *SetTrustedKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrustedKeysResponse.ProtoReflect.Descriptor instead.
func (*SetTrustedKeysResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{32}
}

type SetSkuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku              string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	CountryCode      string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	ApplyCountryCode bool   `protobuf:"varint,4,opt,name=apply_country_code,json=applyCountryCode,proto3" json:"apply_country_code,omitempty"`
}

func (x *SetSkuRequest) Reset() {
	*x = SetSkuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkuRequest) ProtoMessage() {}

func (x *SetSkuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkuRequest.ProtoReflect.Descriptor instead.
func (*SetSkuRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{33}
}

func (x *SetSkuRequest) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *SetSkuRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SetSkuRequest) GetApplyCountryCode() bool {
	if x != nil {
		return x.ApplyCountryCode
	}
	return false
}

type SetSkuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSkuResponse) Reset() {
	*x = SetSkuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkuResponse) ProtoMessage() {}

func (x *SetSkuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkuResponse.ProtoReflect.Descriptor instead.
func (*SetSkuResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{34}
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{35}
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{36}
}

type RestartControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartControlRequest) Reset() {
	*x = RestartControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartControlRequest) ProtoMessage() {}

func (x *RestartControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartControlRequest.ProtoReflect.Descriptor instead.
func (*RestartControlRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{37}
}

type RestartControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartControlResponse) Reset() {
	*x = RestartControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartControlResponse) ProtoMessage() {}

func (x *RestartControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartControlResponse.ProtoReflect.Descriptor instead.
func (*RestartControlResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{38}
}

type GetNetworkInterfacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNetworkInterfacesRequest) Reset() {
	*x = GetNetworkInterfacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkInterfacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkInterfacesRequest) ProtoMessage() {}

func (x *GetNetworkInterfacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkInterfacesRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkInterfacesRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{39}
}

type GetNetworkInterfacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkInterfaces []*NetworkInterface `protobuf:"bytes,1006,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
}

func (x *GetNetworkInterfacesResponse) Reset() {
	*x = GetNetworkInterfacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkInterfacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkInterfacesResponse) ProtoMessage() {}

func (x *GetNetworkInterfacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkInterfacesResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkInterfacesResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{40}
}

func (x *GetNetworkInterfacesResponse) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

type GetHeapDumpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHeapDumpRequest) Reset() {
	*x = GetHeapDumpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeapDumpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeapDumpRequest) ProtoMessage() {}

func (x *GetHeapDumpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeapDumpRequest.ProtoReflect.Descriptor instead.
func (*GetHeapDumpRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{41}
}

type GetHeapDumpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeapDump string `protobuf:"bytes,1,opt,name=heap_dump,json=heapDump,proto3" json:"heap_dump,omitempty"`
}

func (x *GetHeapDumpResponse) Reset() {
	*x = GetHeapDumpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeapDumpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeapDumpResponse) ProtoMessage() {}

func (x *GetHeapDumpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeapDumpResponse.ProtoReflect.Descriptor instead.
func (*GetHeapDumpResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{42}
}

func (x *GetHeapDumpResponse) GetHeapDump() string {
	if x != nil {
		return x.HeapDump
	}
	return ""
}

type GetLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLocationRequest) Reset() {
	*x = GetLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationRequest) ProtoMessage() {}

func (x *GetLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationRequest.ProtoReflect.Descriptor instead.
func (*GetLocationRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{43}
}

type GetLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lla  *LLAPosition  `protobuf:"bytes,1,opt,name=lla,proto3" json:"lla,omitempty"`
	Ecef *ECEFPosition `protobuf:"bytes,2,opt,name=ecef,proto3" json:"ecef,omitempty"`
}

func (x *GetLocationResponse) Reset() {
	*x = GetLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationResponse) ProtoMessage() {}

func (x *GetLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationResponse.ProtoReflect.Descriptor instead.
func (*GetLocationResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{44}
}

func (x *GetLocationResponse) GetLla() *LLAPosition {
	if x != nil {
		return x.Lla
	}
	return nil
}

func (x *GetLocationResponse) GetEcef() *ECEFPosition {
	if x != nil {
		return x.Ecef
	}
	return nil
}

type DishSetEmcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theta               float64 `protobuf:"fixed64,1,opt,name=theta,proto3" json:"theta,omitempty"`
	Phi                 float64 `protobuf:"fixed64,2,opt,name=phi,proto3" json:"phi,omitempty"`
	RxChan              uint32  `protobuf:"varint,3,opt,name=rx_chan,json=rxChan,proto3" json:"rx_chan,omitempty"`
	TxChan              uint32  `protobuf:"varint,4,opt,name=tx_chan,json=txChan,proto3" json:"tx_chan,omitempty"`
	Modulation          uint32  `protobuf:"varint,5,opt,name=modulation,proto3" json:"modulation,omitempty"`
	DesiredTiltAngle    float64 `protobuf:"fixed64,7,opt,name=desired_tilt_angle,json=desiredTiltAngle,proto3" json:"desired_tilt_angle,omitempty"`
	ChanOverride        bool    `protobuf:"varint,8,opt,name=chan_override,json=chanOverride,proto3" json:"chan_override,omitempty"`
	ThetaEnabled        bool    `protobuf:"varint,9,opt,name=theta_enabled,json=thetaEnabled,proto3" json:"theta_enabled,omitempty"`
	PhiEnabled          bool    `protobuf:"varint,10,opt,name=phi_enabled,json=phiEnabled,proto3" json:"phi_enabled,omitempty"`
	Idle                bool    `protobuf:"varint,11,opt,name=idle,proto3" json:"idle,omitempty"`
	FastSwitching       bool    `protobuf:"varint,12,opt,name=fast_switching,json=fastSwitching,proto3" json:"fast_switching,omitempty"`
	SkySearch           bool    `protobuf:"varint,13,opt,name=sky_search,json=skySearch,proto3" json:"sky_search,omitempty"`
	ForcePllUnlock      bool    `protobuf:"varint,14,opt,name=force_pll_unlock,json=forcePllUnlock,proto3" json:"force_pll_unlock,omitempty"`
	ForceEirpFailure    bool    `protobuf:"varint,15,opt,name=force_eirp_failure,json=forceEirpFailure,proto3" json:"force_eirp_failure,omitempty"`
	SnowActiveOverride  bool    `protobuf:"varint,16,opt,name=snow_active_override,json=snowActiveOverride,proto3" json:"snow_active_override,omitempty"`
	ManualTilting       bool    `protobuf:"varint,18,opt,name=manual_tilting,json=manualTilting,proto3" json:"manual_tilting,omitempty"`
	TiltToStowed        bool    `protobuf:"varint,19,opt,name=tilt_to_stowed,json=tiltToStowed,proto3" json:"tilt_to_stowed,omitempty"`
	Reboot              bool    `protobuf:"varint,20,opt,name=reboot,proto3" json:"reboot,omitempty"`
	ContinuousMotorTest bool    `protobuf:"varint,21,opt,name=continuous_motor_test,json=continuousMotorTest,proto3" json:"continuous_motor_test,omitempty"`
}

func (x *DishSetEmcRequest) Reset() {
	*x = DishSetEmcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DishSetEmcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DishSetEmcRequest) ProtoMessage() {}

func (x *DishSetEmcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DishSetEmcRequest.ProtoReflect.Descriptor instead.
func (*DishSetEmcRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{45}
}

func (x *DishSetEmcRequest) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *DishSetEmcRequest) GetPhi() float64 {
	if x != nil {
		return x.Phi
	}
	return 0
}

func (x *DishSetEmcRequest) GetRxChan() uint32 {
	if x != nil {
		return x.RxChan
	}
	return 0
}

func (x *DishSetEmcRequest) GetTxChan() uint32 {
	if x != nil {
		return x.TxChan
	}
	return 0
}

func (x *DishSetEmcRequest) GetModulation() uint32 {
	if x != nil {
		return x.Modulation
	}
	return 0
}

func (x *DishSetEmcRequest) GetDesiredTiltAngle() float64 {
	if x != nil {
		return x.DesiredTiltAngle
	}
	return 0
}

func (x *DishSetEmcRequest) GetChanOverride() bool {
	if x != nil {
		return x.ChanOverride
	}
	return false
}

func (x *DishSetEmcRequest) GetThetaEnabled() bool {
	if x != nil {
		return x.ThetaEnabled
	}
	return false
}

func (x *DishSetEmcRequest) GetPhiEnabled() bool {
	if x != nil {
		return x.PhiEnabled
	}
	return false
}

func (x *DishSetEmcRequest) GetIdle() bool {
	if x != nil {
		return x.Idle
	}
	return false
}

func (x *DishSetEmcRequest) GetFastSwitching() bool {
	if x != nil {
		return x.FastSwitching
	}
	return false
}

func (x *DishSetEmcRequest) GetSkySearch() bool {
	if x != nil {
		return x.SkySearch
	}
	return false
}

func (x *DishSetEmcRequest) GetForcePllUnlock() bool {
	if x != nil {
		return x.ForcePllUnlock
	}
	return false
}

func (x *DishSetEmcRequest) GetForceEirpFailure() bool {
	if x != nil {
		return x.ForceEirpFailure
	}
	return false
}

func (x *DishSetEmcRequest) GetSnowActiveOverride() bool {
	if x != nil {
		return x.SnowActiveOverride
	}
	return false
}

func (x *DishSetEmcRequest) GetManualTilting() bool {
	if x != nil {
		return x.ManualTilting
	}
	return false
}

func (x *DishSetEmcRequest) GetTiltToStowed() bool {
	if x != nil {
		return x.TiltToStowed
	}
	return false
}

func (x *DishSetEmcRequest) GetReboot() bool {
	if x != nil {
		return x.Reboot
	}
	return false
}

func (x *DishSetEmcRequest) GetContinuousMotorTest() bool {
	if x != nil {
		return x.ContinuousMotorTest
	}
	return false
}

type DishSetEmcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DishSetEmcResponse) Reset() {
	*x = DishSetEmcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DishSetEmcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DishSetEmcResponse) ProtoMessage() {}

func (x *DishSetEmcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DishSetEmcResponse.ProtoReflect.Descriptor instead.
func (*DishSetEmcResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{46}
}

type DishGetEmcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DishGetEmcRequest) Reset() {
	*x = DishGetEmcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DishGetEmcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DishGetEmcRequest) ProtoMessage() {}

func (x *DishGetEmcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DishGetEmcRequest.ProtoReflect.Descriptor instead.
func (*DishGetEmcRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{47}
}

type DishGetEmcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                     string  `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Timestamp                uint64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CplaneUpdates            uint32  `protobuf:"varint,11,opt,name=cplane_updates,json=cplaneUpdates,proto3" json:"cplane_updates,omitempty"`
	GpsLatitude              float64 `protobuf:"fixed64,16,opt,name=gps_latitude,json=gpsLatitude,proto3" json:"gps_latitude,omitempty"`
	GpsLongitude             float64 `protobuf:"fixed64,17,opt,name=gps_longitude,json=gpsLongitude,proto3" json:"gps_longitude,omitempty"`
	GpsPdop                  float64 `protobuf:"fixed64,18,opt,name=gps_pdop,json=gpsPdop,proto3" json:"gps_pdop,omitempty"`
	RfMode                   uint32  `protobuf:"varint,19,opt,name=rf_mode,json=rfMode,proto3" json:"rf_mode,omitempty"`
	Phi                      float64 `protobuf:"fixed64,20,opt,name=phi,proto3" json:"phi,omitempty"`
	Theta                    float64 `protobuf:"fixed64,21,opt,name=theta,proto3" json:"theta,omitempty"`
	RxChannel                uint32  `protobuf:"varint,22,opt,name=rx_channel,json=rxChannel,proto3" json:"rx_channel,omitempty"`
	TxChannel                uint32  `protobuf:"varint,23,opt,name=tx_channel,json=txChannel,proto3" json:"tx_channel,omitempty"`
	TDbfMax                  float32 `protobuf:"fixed32,24,opt,name=t_dbf_max,json=tDbfMax,proto3" json:"t_dbf_max,omitempty"`
	TCenter                  float64 `protobuf:"fixed64,25,opt,name=t_center,json=tCenter,proto3" json:"t_center,omitempty"`
	BaselineHeating          float64 `protobuf:"fixed64,26,opt,name=baseline_heating,json=baselineHeating,proto3" json:"baseline_heating,omitempty"`
	AdditionalHeating        float64 `protobuf:"fixed64,27,opt,name=additional_heating,json=additionalHeating,proto3" json:"additional_heating,omitempty"`
	TotalHeating             float64 `protobuf:"fixed64,28,opt,name=total_heating,json=totalHeating,proto3" json:"total_heating,omitempty"`
	TargetTotalHeating       float64 `protobuf:"fixed64,29,opt,name=target_total_heating,json=targetTotalHeating,proto3" json:"target_total_heating,omitempty"`
	AutoPowerSnowMeltEnabled bool    `protobuf:"varint,30,opt,name=auto_power_snow_melt_enabled,json=autoPowerSnowMeltEnabled,proto3" json:"auto_power_snow_melt_enabled,omitempty"`
	Voltage                  float64 `protobuf:"fixed64,32,opt,name=voltage,proto3" json:"voltage,omitempty"`
	RxBeamState              uint32  `protobuf:"varint,33,opt,name=rx_beam_state,json=rxBeamState,proto3" json:"rx_beam_state,omitempty"`
	TxBeamState              uint32  `protobuf:"varint,34,opt,name=tx_beam_state,json=txBeamState,proto3" json:"tx_beam_state,omitempty"`
	HalfDuplexState          uint32  `protobuf:"varint,35,opt,name=half_duplex_state,json=halfDuplexState,proto3" json:"half_duplex_state,omitempty"`
	ManualTiltEnabled        bool    `protobuf:"varint,36,opt,name=manual_tilt_enabled,json=manualTiltEnabled,proto3" json:"manual_tilt_enabled,omitempty"`
	TiltAngle                float64 `protobuf:"fixed64,37,opt,name=tilt_angle,json=tiltAngle,proto3" json:"tilt_angle,omitempty"`
	PllTxLockDetected        uint32  `protobuf:"varint,38,opt,name=pll_tx_lock_detected,json=pllTxLockDetected,proto3" json:"pll_tx_lock_detected,omitempty"`
	EirpExceededThreshold    bool    `protobuf:"varint,39,opt,name=eirp_exceeded_threshold,json=eirpExceededThreshold,proto3" json:"eirp_exceeded_threshold,omitempty"`
	EirpScaleOverride        float32 `protobuf:"fixed32,40,opt,name=eirp_scale_override,json=eirpScaleOverride,proto3" json:"eirp_scale_override,omitempty"`
	IdleOverrideEnabled      bool    `protobuf:"varint,41,opt,name=idle_override_enabled,json=idleOverrideEnabled,proto3" json:"idle_override_enabled,omitempty"`
	ThetaOverrideEnabled     bool    `protobuf:"varint,42,opt,name=theta_override_enabled,json=thetaOverrideEnabled,proto3" json:"theta_override_enabled,omitempty"`
	ThetaOverrideValue       float64 `protobuf:"fixed64,43,opt,name=theta_override_value,json=thetaOverrideValue,proto3" json:"theta_override_value,omitempty"`
	PhiOverrideEnabled       bool    `protobuf:"varint,44,opt,name=phi_override_enabled,json=phiOverrideEnabled,proto3" json:"phi_override_enabled,omitempty"`
	PhiOverrideValue         float64 `protobuf:"fixed64,45,opt,name=phi_override_value,json=phiOverrideValue,proto3" json:"phi_override_value,omitempty"`
	RxChanOverrideValue      uint32  `protobuf:"varint,46,opt,name=rx_chan_override_value,json=rxChanOverrideValue,proto3" json:"rx_chan_override_value,omitempty"`
	TxChanOverrideValue      uint32  `protobuf:"varint,47,opt,name=tx_chan_override_value,json=txChanOverrideValue,proto3" json:"tx_chan_override_value,omitempty"`
	SkySearchOverrideEnabled bool    `protobuf:"varint,48,opt,name=sky_search_override_enabled,json=skySearchOverrideEnabled,proto3" json:"sky_search_override_enabled,omitempty"`
	FastSwitchingEnabled     bool    `protobuf:"varint,49,opt,name=fast_switching_enabled,json=fastSwitchingEnabled,proto3" json:"fast_switching_enabled,omitempty"`
	ModulationOverrideValue  uint32  `protobuf:"varint,50,opt,name=modulation_override_value,json=modulationOverrideValue,proto3" json:"modulation_override_value,omitempty"`
	ForceEirpFailure         bool    `protobuf:"varint,51,opt,name=force_eirp_failure,json=forceEirpFailure,proto3" json:"force_eirp_failure,omitempty"`
	ForcePllUnlock           bool    `protobuf:"varint,52,opt,name=force_pll_unlock,json=forcePllUnlock,proto3" json:"force_pll_unlock,omitempty"`
	UtIneSuccess             uint32  `protobuf:"varint,53,opt,name=ut_ine_success,json=utIneSuccess,proto3" json:"ut_ine_success,omitempty"`
	RfReady                  bool    `protobuf:"varint,54,opt,name=rf_ready,json=rfReady,proto3" json:"rf_ready,omitempty"`
	TiltToStowed             bool    `protobuf:"varint,55,opt,name=tilt_to_stowed,json=tiltToStowed,proto3" json:"tilt_to_stowed,omitempty"`
	Reboot                   bool    `protobuf:"varint,56,opt,name=reboot,proto3" json:"reboot,omitempty"`
	ContinuousMotorTest      bool    `protobuf:"varint,57,opt,name=continuous_motor_test,json=continuousMotorTest,proto3" json:"continuous_motor_test,omitempty"`
}

func (x *DishGetEmcResponse) Reset() {
	*x = DishGetEmcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DishGetEmcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DishGetEmcResponse) ProtoMessage() {}

func (x *DishGetEmcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DishGetEmcResponse.ProtoReflect.Descriptor instead.
func (*DishGetEmcResponse) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{48}
}

func (x *DishGetEmcResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DishGetEmcResponse) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DishGetEmcResponse) GetCplaneUpdates() uint32 {
	if x != nil {
		return x.CplaneUpdates
	}
	return 0
}

func (x *DishGetEmcResponse) GetGpsLatitude() float64 {
	if x != nil {
		return x.GpsLatitude
	}
	return 0
}

func (x *DishGetEmcResponse) GetGpsLongitude() float64 {
	if x != nil {
		return x.GpsLongitude
	}
	return 0
}

func (x *DishGetEmcResponse) GetGpsPdop() float64 {
	if x != nil {
		return x.GpsPdop
	}
	return 0
}

func (x *DishGetEmcResponse) GetRfMode() uint32 {
	if x != nil {
		return x.RfMode
	}
	return 0
}

func (x *DishGetEmcResponse) GetPhi() float64 {
	if x != nil {
		return x.Phi
	}
	return 0
}

func (x *DishGetEmcResponse) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *DishGetEmcResponse) GetRxChannel() uint32 {
	if x != nil {
		return x.RxChannel
	}
	return 0
}

func (x *DishGetEmcResponse) GetTxChannel() uint32 {
	if x != nil {
		return x.TxChannel
	}
	return 0
}

func (x *DishGetEmcResponse) GetTDbfMax() float32 {
	if x != nil {
		return x.TDbfMax
	}
	return 0
}

func (x *DishGetEmcResponse) GetTCenter() float64 {
	if x != nil {
		return x.TCenter
	}
	return 0
}

func (x *DishGetEmcResponse) GetBaselineHeating() float64 {
	if x != nil {
		return x.BaselineHeating
	}
	return 0
}

func (x *DishGetEmcResponse) GetAdditionalHeating() float64 {
	if x != nil {
		return x.AdditionalHeating
	}
	return 0
}

func (x *DishGetEmcResponse) GetTotalHeating() float64 {
	if x != nil {
		return x.TotalHeating
	}
	return 0
}

func (x *DishGetEmcResponse) GetTargetTotalHeating() float64 {
	if x != nil {
		return x.TargetTotalHeating
	}
	return 0
}

func (x *DishGetEmcResponse) GetAutoPowerSnowMeltEnabled() bool {
	if x != nil {
		return x.AutoPowerSnowMeltEnabled
	}
	return false
}

func (x *DishGetEmcResponse) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *DishGetEmcResponse) GetRxBeamState() uint32 {
	if x != nil {
		return x.RxBeamState
	}
	return 0
}

func (x *DishGetEmcResponse) GetTxBeamState() uint32 {
	if x != nil {
		return x.TxBeamState
	}
	return 0
}

func (x *DishGetEmcResponse) GetHalfDuplexState() uint32 {
	if x != nil {
		return x.HalfDuplexState
	}
	return 0
}

func (x *DishGetEmcResponse) GetManualTiltEnabled() bool {
	if x != nil {
		return x.ManualTiltEnabled
	}
	return false
}

func (x *DishGetEmcResponse) GetTiltAngle() float64 {
	if x != nil {
		return x.TiltAngle
	}
	return 0
}

func (x *DishGetEmcResponse) GetPllTxLockDetected() uint32 {
	if x != nil {
		return x.PllTxLockDetected
	}
	return 0
}

func (x *DishGetEmcResponse) GetEirpExceededThreshold() bool {
	if x != nil {
		return x.EirpExceededThreshold
	}
	return false
}

func (x *DishGetEmcResponse) GetEirpScaleOverride() float32 {
	if x != nil {
		return x.EirpScaleOverride
	}
	return 0
}

func (x *DishGetEmcResponse) GetIdleOverrideEnabled() bool {
	if x != nil {
		return x.IdleOverrideEnabled
	}
	return false
}

func (x *DishGetEmcResponse) GetThetaOverrideEnabled() bool {
	if x != nil {
		return x.ThetaOverrideEnabled
	}
	return false
}

func (x *DishGetEmcResponse) GetThetaOverrideValue() float64 {
	if x != nil {
		return x.ThetaOverrideValue
	}
	return 0
}

func (x *DishGetEmcResponse) GetPhiOverrideEnabled() bool {
	if x != nil {
		return x.PhiOverrideEnabled
	}
	return false
}

func (x *DishGetEmcResponse) GetPhiOverrideValue() float64 {
	if x != nil {
		return x.PhiOverrideValue
	}
	return 0
}

func (x *DishGetEmcResponse) GetRxChanOverrideValue() uint32 {
	if x != nil {
		return x.RxChanOverrideValue
	}
	return 0
}

func (x *DishGetEmcResponse) GetTxChanOverrideValue() uint32 {
	if x != nil {
		return x.TxChanOverrideValue
	}
	return 0
}

func (x *DishGetEmcResponse) GetSkySearchOverrideEnabled() bool {
	if x != nil {
		return x.SkySearchOverrideEnabled
	}
	return false
}

func (x *DishGetEmcResponse) GetFastSwitchingEnabled() bool {
	if x != nil {
		return x.FastSwitchingEnabled
	}
	return false
}

func (x *DishGetEmcResponse) GetModulationOverrideValue() uint32 {
	if x != nil {
		return x.ModulationOverrideValue
	}
	return 0
}

func (x *DishGetEmcResponse) GetForceEirpFailure() bool {
	if x != nil {
		return x.ForceEirpFailure
	}
	return false
}

func (x *DishGetEmcResponse) GetForcePllUnlock() bool {
	if x != nil {
		return x.ForcePllUnlock
	}
	return false
}

func (x *DishGetEmcResponse) GetUtIneSuccess() uint32 {
	if x != nil {
		return x.UtIneSuccess
	}
	return 0
}

func (x *DishGetEmcResponse) GetRfReady() bool {
	if x != nil {
		return x.RfReady
	}
	return false
}

func (x *DishGetEmcResponse) GetTiltToStowed() bool {
	if x != nil {
		return x.TiltToStowed
	}
	return false
}

func (x *DishGetEmcResponse) GetReboot() bool {
	if x != nil {
		return x.Reboot
	}
	return false
}

func (x *DishGetEmcResponse) GetContinuousMotorTest() bool {
	if x != nil {
		return x.ContinuousMotorTest
	}
	return false
}

type GetPersistentStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPersistentStatsRequest) Reset() {
	*x = GetPersistentStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersistentStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersistentStatsRequest) ProtoMessage() {}

func (x *GetPersistentStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersistentStatsRequest.ProtoReflect.Descriptor instead.
func (*GetPersistentStatsRequest) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{49}
}

type GetConnectionsResponse_ServiceConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address             string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SecondsSinceSuccess int32  `protobuf:"varint,2,opt,name=seconds_since_success,json=secondsSinceSuccess,proto3" json:"seconds_since_success,omitempty"`
}

func (x *GetConnectionsResponse_ServiceConnection) Reset() {
	*x = GetConnectionsResponse_ServiceConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spacex_api_device_device_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionsResponse_ServiceConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionsResponse_ServiceConnection) ProtoMessage() {}

func (x *GetConnectionsResponse_ServiceConnection) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_device_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionsResponse_ServiceConnection.ProtoReflect.Descriptor instead.
func (*GetConnectionsResponse_ServiceConnection) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_device_proto_rawDescGZIP(), []int{28, 0}
}

func (x *GetConnectionsResponse_ServiceConnection) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetConnectionsResponse_ServiceConnection) GetSecondsSinceSuccess() int32 {
	if x != nil {
		return x.SecondsSinceSuccess
	}
	return 0
}

var File_spacex_api_device_device_proto protoreflect.FileDescriptor

var file_spacex_api_device_device_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x25, 0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64,
	0x69, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x77, 0x69, 0x66, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x08,
	0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0a,
	0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xc9, 0x1a, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xee, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x4e, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x52, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a,
	0x07, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x67, 0x0a, 0x16, 0x67,
	0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x67, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65,
	0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69,
	0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x3c, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x12, 0x55, 0x0a, 0x10, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f,
	0x64, 0x75, 0x6d, 0x70, 0x18, 0xfb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x70, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x70, 0x44, 0x75, 0x6d,
	0x70, 0x12, 0x54, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x66, 0x75, 0x73, 0x65, 0x18,
	0xfd, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x66, 0x75, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xfe, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x67,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x54, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x82, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x77, 0x18, 0xd2,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x53, 0x74,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x68, 0x53, 0x74, 0x6f, 0x77, 0x12, 0x55, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x68, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6b, 0x0a, 0x18,
	0x64, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0xd8, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x15, 0x64, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x68, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x6d, 0x63, 0x18, 0xd7, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x68, 0x53, 0x65,
	0x74, 0x45, 0x6d, 0x63, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x6d, 0x63, 0x18, 0xd9, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x63, 0x12,
	0x77, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x66, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18,
	0xa1, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x46, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x66, 0x4c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0xa3, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x70, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0xa4,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x10, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xba, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x69, 0x66, 0x69,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x14, 0x77, 0x69,
	0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0xc0, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x77, 0x69, 0x66, 0x69, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x62, 0x0a,
	0x15, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0xbf, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x77,
	0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x52, 0x0a, 0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc1, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x69, 0x66, 0x69,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0a, 0x77, 0x69, 0x66,
	0x69, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0xbb, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x12, 0x68, 0x0a, 0x17, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc3, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x77, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x1a, 0x77, 0x69,
	0x66, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x18, 0xc4, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x16, 0x77, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x68,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x06, 0x08, 0x81, 0x08, 0x10, 0x82, 0x08, 0x22, 0x84,
	0x1d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xee,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x67,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x4f, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x07, 0x67, 0x65, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x68, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0xf1,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x12, 0x56,
	0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x64,
	0x75, 0x6d, 0x70, 0x18, 0xfb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x70, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x70, 0x44, 0x75, 0x6d,
	0x70, 0x12, 0x55, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x04, 0x66, 0x75, 0x73, 0x65,
	0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x75, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x82, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x12, 0x5b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0xd5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x64,
	0x69, 0x73, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x56, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x68, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xd6, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x64, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x53, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0xd4, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x68, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x6f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0xd8, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68,
	0x47, 0x65, 0x74, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x64, 0x69, 0x73,
	0x68, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x6f, 0x77, 0x18,
	0xd2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x53,
	0x74, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x68, 0x53, 0x74, 0x6f, 0x77, 0x12, 0x4a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x68, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x65, 0x6d, 0x63, 0x18, 0xd7, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x68, 0x53, 0x65, 0x74,
	0x45, 0x6d, 0x63, 0x12, 0x4a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x68, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x65, 0x6d, 0x63, 0x18, 0xd9, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x63, 0x12,
	0x78, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x66, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18,
	0xa1, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x46, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x66, 0x4c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x16, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0xa3, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x71, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x18, 0xa4, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x5b, 0x0a, 0x11, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0xbd, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x77, 0x69, 0x66, 0x69, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xba, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x69, 0x66,
	0x69, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x14, 0x77,
	0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0xc0, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x77, 0x69, 0x66,
	0x69, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x56, 0x0a, 0x10, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0xbe, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x63, 0x0a, 0x15, 0x77, 0x69, 0x66, 0x69, 0x5f,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0xbf, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69,
	0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x77, 0x69, 0x66, 0x69, 0x47, 0x65,
	0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x53, 0x0a, 0x0f,
	0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0xbc, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x53, 0x0a, 0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x0f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xc1, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x69,
	0x66, 0x69, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0a, 0x77,
	0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0xbb, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x77, 0x69, 0x66, 0x69, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x12, 0x6f, 0x0a, 0x19, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0xce, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58,
	0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x77, 0x69,
	0x66, 0x69, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x17, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xc3, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x77, 0x69, 0x66, 0x69, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x70, 0x0a, 0x1a, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x68,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x18, 0xc4, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x53, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x77, 0x69, 0x66, 0x69, 0x53,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x06, 0x08,
	0xe9, 0x0f, 0x10, 0xea, 0x0f, 0x22, 0xdf, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x6c, 0x0a, 0x19, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0xb9, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x65, 0x77, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x77, 0x69, 0x66, 0x69, 0x4e, 0x65, 0x77, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x5f, 0x0a,
	0x14, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0xba, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x57, 0x69, 0x66, 0x69, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x77, 0x69, 0x66, 0x69,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x22,
	0x14, 0x0a, 0x12, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x15, 0x0a, 0x13, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x0d, 0x0a, 0x0b, 0x46, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e,
	0x0a, 0x0c, 0x46, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x22,
	0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x59, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x0f, 0x50,
	0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x49, 0x0a, 0x10, 0x50, 0x69, 0x6e, 0x67,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62,
	0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x73, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52,
	0x4f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x03, 0x22, 0xcd,
	0x01, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x73, 0x73, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x73,
	0x73, 0x69, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xf5,
	0x05, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x70, 0x73, 0x12, 0x1f,
	0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x12,
	0x27, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x21, 0x0a,
	0x0a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73,
	0x12, 0x4c, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x18, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f,
	0x31, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x31, 0x54,
	0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x32, 0x0a, 0x16, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x31, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62,
	0x70, 0x73, 0x31, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x34, 0x5f, 0x74, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x34, 0x54, 0x63, 0x70, 0x43, 0x6f,
	0x6e, 0x6e, 0x12, 0x32, 0x0a, 0x16, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70,
	0x73, 0x5f, 0x34, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x34, 0x54,
	0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x38, 0x0a, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x31, 0x36, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x31, 0x36, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e,
	0x12, 0x34, 0x0a, 0x17, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f,
	0x31, 0x36, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x31, 0x36, 0x54,
	0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x38, 0x0a, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f, 0x36, 0x34, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x36, 0x34, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e,
	0x12, 0x34, 0x0a, 0x17, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x5f,
	0x36, 0x34, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x36, 0x34, 0x54,
	0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xca, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0x61, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x1a, 0x78, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x49, 0x0a,
	0x15, 0x53, 0x65, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50,
	0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x72, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x75,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x73, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x18, 0xee, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x70, 0x44, 0x75, 0x6d,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x70, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x44, 0x75, 0x6d, 0x70, 0x22, 0x14, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6c, 0x6c, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e,
	0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x4c, 0x41, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c, 0x6c, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x65,
	0x63, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x43,
	0x45, 0x46, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x65, 0x63, 0x65, 0x66,
	0x22, 0xa3, 0x05, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x68, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x68, 0x69, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x78, 0x43, 0x68, 0x61, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6c, 0x74,
	0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6c, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x65, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x74,
	0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x69, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70,
	0x68, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x61, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x79, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x6c,
	0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a,
	0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x69, 0x72, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x45, 0x69, 0x72, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x6e, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x6e, 0x6f, 0x77, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x74, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x69,
	0x6c, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x5f, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x74,
	0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x68, 0x53, 0x65,
	0x74, 0x45, 0x6d, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11,
	0x44, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x8f, 0x0e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x68, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x70, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x70, 0x73, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x70, 0x73, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x70, 0x73,
	0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x73,
	0x5f, 0x70, 0x64, 0x6f, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x70, 0x73,
	0x50, 0x64, 0x6f, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x68, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x68, 0x69, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x78, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x78, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x09, 0x74, 0x5f, 0x64, 0x62, 0x66, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x44, 0x62, 0x66, 0x4d, 0x61, 0x78, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61,
	0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1c, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x5f, 0x6d,
	0x65, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x6e, 0x6f, 0x77,
	0x4d, 0x65, 0x6c, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x62, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x78,
	0x42, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x78, 0x5f,
	0x62, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x78, 0x42, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x61, 0x6c, 0x66, 0x44, 0x75,
	0x70, 0x6c, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x69,
	0x6c, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6c,
	0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6c, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x6c, 0x6c, 0x5f,
	0x74, 0x78, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6c, 0x6c, 0x54, 0x78, 0x4c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x69, 0x72,
	0x70, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x69, 0x72, 0x70,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x69, 0x72, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x65, 0x69, 0x72, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x69, 0x64, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x68, 0x65, 0x74, 0x61, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x68, 0x65, 0x74, 0x61, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x68, 0x65, 0x74, 0x61, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x68, 0x69, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x68, 0x69,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x68, 0x69, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x68, 0x69,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x72, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72,
	0x78, 0x43, 0x68, 0x61, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x74, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x6b, 0x79, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x6b,
	0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x61, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x65, 0x69, 0x72, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x69, 0x72, 0x70, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x70, 0x6c, 0x6c, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x24, 0x0a, 0x0e, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x74, 0x49, 0x6e, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x66, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x66, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x69, 0x6c, 0x74, 0x54,
	0x6f, 0x53, 0x74, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x6f,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x95, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41,
	0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1d, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x06, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x1a, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x58, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x17, 0x5a, 0x15, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spacex_api_device_device_proto_rawDescOnce sync.Once
	file_spacex_api_device_device_proto_rawDescData = file_spacex_api_device_device_proto_rawDesc
)

func file_spacex_api_device_device_proto_rawDescGZIP() []byte {
	file_spacex_api_device_device_proto_rawDescOnce.Do(func() {
		file_spacex_api_device_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_spacex_api_device_device_proto_rawDescData)
	})
	return file_spacex_api_device_device_proto_rawDescData
}

var file_spacex_api_device_device_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spacex_api_device_device_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_spacex_api_device_device_proto_goTypes = []interface{}{
	(ClientPlatform_Platform)(0),                     // 0: SpaceX.API.Device.ClientPlatform.Platform
	(*ToDevice)(nil),                                 // 1: SpaceX.API.Device.ToDevice
	(*FromDevice)(nil),                               // 2: SpaceX.API.Device.FromDevice
	(*Request)(nil),                                  // 3: SpaceX.API.Device.Request
	(*Response)(nil),                                 // 4: SpaceX.API.Device.Response
	(*Event)(nil),                                    // 5: SpaceX.API.Device.Event
	(*EnableFlowRequest)(nil),                        // 6: SpaceX.API.Device.EnableFlowRequest
	(*EnableFlowResponse)(nil),                       // 7: SpaceX.API.Device.EnableFlowResponse
	(*FlushTelemRequest)(nil),                        // 8: SpaceX.API.Device.FlushTelemRequest
	(*FlushTelemResponse)(nil),                       // 9: SpaceX.API.Device.FlushTelemResponse
	(*FactoryResetRequest)(nil),                      // 10: SpaceX.API.Device.FactoryResetRequest
	(*FactoryResetResponse)(nil),                     // 11: SpaceX.API.Device.FactoryResetResponse
	(*FuseRequest)(nil),                              // 12: SpaceX.API.Device.FuseRequest
	(*FuseResponse)(nil),                             // 13: SpaceX.API.Device.FuseResponse
	(*GetHistoryRequest)(nil),                        // 14: SpaceX.API.Device.GetHistoryRequest
	(*GetLogRequest)(nil),                            // 15: SpaceX.API.Device.GetLogRequest
	(*GetLogResponse)(nil),                           // 16: SpaceX.API.Device.GetLogResponse
	(*GetPingRequest)(nil),                           // 17: SpaceX.API.Device.GetPingRequest
	(*GetPingResponse)(nil),                          // 18: SpaceX.API.Device.GetPingResponse
	(*PingHostRequest)(nil),                          // 19: SpaceX.API.Device.PingHostRequest
	(*PingHostResponse)(nil),                         // 20: SpaceX.API.Device.PingHostResponse
	(*GetStatusRequest)(nil),                         // 21: SpaceX.API.Device.GetStatusRequest
	(*RebootRequest)(nil),                            // 22: SpaceX.API.Device.RebootRequest
	(*RebootResponse)(nil),                           // 23: SpaceX.API.Device.RebootResponse
	(*SpeedTestStats)(nil),                           // 24: SpaceX.API.Device.SpeedTestStats
	(*ClientPlatform)(nil),                           // 25: SpaceX.API.Device.ClientPlatform
	(*SpeedTestRequest)(nil),                         // 26: SpaceX.API.Device.SpeedTestRequest
	(*SpeedTestResponse)(nil),                        // 27: SpaceX.API.Device.SpeedTestResponse
	(*GetConnectionsRequest)(nil),                    // 28: SpaceX.API.Device.GetConnectionsRequest
	(*GetConnectionsResponse)(nil),                   // 29: SpaceX.API.Device.GetConnectionsResponse
	(*GetDeviceInfoRequest)(nil),                     // 30: SpaceX.API.Device.GetDeviceInfoRequest
	(*GetDeviceInfoResponse)(nil),                    // 31: SpaceX.API.Device.GetDeviceInfoResponse
	(*SetTrustedKeysRequest)(nil),                    // 32: SpaceX.API.Device.SetTrustedKeysRequest
	(*SetTrustedKeysResponse)(nil),                   // 33: SpaceX.API.Device.SetTrustedKeysResponse
	(*SetSkuRequest)(nil),                            // 34: SpaceX.API.Device.SetSkuRequest
	(*SetSkuResponse)(nil),                           // 35: SpaceX.API.Device.SetSkuResponse
	(*UpdateRequest)(nil),                            // 36: SpaceX.API.Device.UpdateRequest
	(*UpdateResponse)(nil),                           // 37: SpaceX.API.Device.UpdateResponse
	(*RestartControlRequest)(nil),                    // 38: SpaceX.API.Device.RestartControlRequest
	(*RestartControlResponse)(nil),                   // 39: SpaceX.API.Device.RestartControlResponse
	(*GetNetworkInterfacesRequest)(nil),              // 40: SpaceX.API.Device.GetNetworkInterfacesRequest
	(*GetNetworkInterfacesResponse)(nil),             // 41: SpaceX.API.Device.GetNetworkInterfacesResponse
	(*GetHeapDumpRequest)(nil),                       // 42: SpaceX.API.Device.GetHeapDumpRequest
	(*GetHeapDumpResponse)(nil),                      // 43: SpaceX.API.Device.GetHeapDumpResponse
	(*GetLocationRequest)(nil),                       // 44: SpaceX.API.Device.GetLocationRequest
	(*GetLocationResponse)(nil),                      // 45: SpaceX.API.Device.GetLocationResponse
	(*DishSetEmcRequest)(nil),                        // 46: SpaceX.API.Device.DishSetEmcRequest
	(*DishSetEmcResponse)(nil),                       // 47: SpaceX.API.Device.DishSetEmcResponse
	(*DishGetEmcRequest)(nil),                        // 48: SpaceX.API.Device.DishGetEmcRequest
	(*DishGetEmcResponse)(nil),                       // 49: SpaceX.API.Device.DishGetEmcResponse
	(*GetPersistentStatsRequest)(nil),                // 50: SpaceX.API.Device.GetPersistentStatsRequest
	nil,                                              // 51: SpaceX.API.Device.GetPingResponse.ResultsEntry
	(*GetConnectionsResponse_ServiceConnection)(nil), // 52: SpaceX.API.Device.GetConnectionsResponse.ServiceConnection
	nil,                                       // 53: SpaceX.API.Device.GetConnectionsResponse.ServicesEntry
	(*SignedData)(nil),                        // 54: SpaceX.API.Device.SignedData
	(*GetNextIdRequest)(nil),                  // 55: SpaceX.API.Device.GetNextIdRequest
	(*AuthenticateRequest)(nil),               // 56: SpaceX.API.Device.AuthenticateRequest
	(*DishStowRequest)(nil),                   // 57: SpaceX.API.Device.DishStowRequest
	(*DishGetContextRequest)(nil),             // 58: SpaceX.API.Device.DishGetContextRequest
	(*DishGetObstructionMapRequest)(nil),      // 59: SpaceX.API.Device.DishGetObstructionMapRequest
	(*TransceiverIFLoopbackTestRequest)(nil),  // 60: SpaceX.API.Device.TransceiverIFLoopbackTestRequest
	(*TransceiverGetStatusRequest)(nil),       // 61: SpaceX.API.Device.TransceiverGetStatusRequest
	(*TransceiverGetTelemetryRequest)(nil),    // 62: SpaceX.API.Device.TransceiverGetTelemetryRequest
	(*WifiGetClientsRequest)(nil),             // 63: SpaceX.API.Device.WifiGetClientsRequest
	(*WifiGetDiagnosticsRequest)(nil),         // 64: SpaceX.API.Device.WifiGetDiagnosticsRequest
	(*WifiGetPingMetricsRequest)(nil),         // 65: SpaceX.API.Device.WifiGetPingMetricsRequest
	(*WifiSetConfigRequest)(nil),              // 66: SpaceX.API.Device.WifiSetConfigRequest
	(*WifiGetConfigRequest)(nil),              // 67: SpaceX.API.Device.WifiGetConfigRequest
	(*WifiSetupRequest)(nil),                  // 68: SpaceX.API.Device.WifiSetupRequest
	(*WifiGetNetworkConfigRequest)(nil),       // 69: SpaceX.API.Device.WifiGetNetworkConfigRequest
	(*WifiSetMeshDeviceTrustRequest)(nil),     // 70: SpaceX.API.Device.WifiSetMeshDeviceTrustRequest
	(*status.Status)(nil),                     // 71: SpaceX.API.Status.Status
	(*GetNextIdResponse)(nil),                 // 72: SpaceX.API.Device.GetNextIdResponse
	(*DishAuthenticateResponse)(nil),          // 73: SpaceX.API.Device.DishAuthenticateResponse
	(*DishGetContextResponse)(nil),            // 74: SpaceX.API.Device.DishGetContextResponse
	(*DishGetHistoryResponse)(nil),            // 75: SpaceX.API.Device.DishGetHistoryResponse
	(*DishGetStatusResponse)(nil),             // 76: SpaceX.API.Device.DishGetStatusResponse
	(*DishGetObstructionMapResponse)(nil),     // 77: SpaceX.API.Device.DishGetObstructionMapResponse
	(*DishStowResponse)(nil),                  // 78: SpaceX.API.Device.DishStowResponse
	(*TransceiverIFLoopbackTestResponse)(nil), // 79: SpaceX.API.Device.TransceiverIFLoopbackTestResponse
	(*TransceiverGetStatusResponse)(nil),      // 80: SpaceX.API.Device.TransceiverGetStatusResponse
	(*TransceiverGetTelemetryResponse)(nil),   // 81: SpaceX.API.Device.TransceiverGetTelemetryResponse
	(*WifiAuthenticateResponse)(nil),          // 82: SpaceX.API.Device.WifiAuthenticateResponse
	(*WifiGetClientsResponse)(nil),            // 83: SpaceX.API.Device.WifiGetClientsResponse
	(*WifiGetDiagnosticsResponse)(nil),        // 84: SpaceX.API.Device.WifiGetDiagnosticsResponse
	(*WifiGetHistoryResponse)(nil),            // 85: SpaceX.API.Device.WifiGetHistoryResponse
	(*WifiGetPingMetricsResponse)(nil),        // 86: SpaceX.API.Device.WifiGetPingMetricsResponse
	(*WifiGetStatusResponse)(nil),             // 87: SpaceX.API.Device.WifiGetStatusResponse
	(*WifiSetConfigResponse)(nil),             // 88: SpaceX.API.Device.WifiSetConfigResponse
	(*WifiGetConfigResponse)(nil),             // 89: SpaceX.API.Device.WifiGetConfigResponse
	(*WifiSetupResponse)(nil),                 // 90: SpaceX.API.Device.WifiSetupResponse
	(*WifiGetPersistentStatsResponse)(nil),    // 91: SpaceX.API.Device.WifiGetPersistentStatsResponse
	(*WifiGetNetworkConfigResponse)(nil),      // 92: SpaceX.API.Device.WifiGetNetworkConfigResponse
	(*WifiSetMeshDeviceTrustResponse)(nil),    // 93: SpaceX.API.Device.WifiSetMeshDeviceTrustResponse
	(*WifiNewClientConnectedEvent)(nil),       // 94: SpaceX.API.Device.WifiNewClientConnectedEvent
	(*WifiAccountBondingEvent)(nil),           // 95: SpaceX.API.Device.WifiAccountBondingEvent
	(*PingResult)(nil),                        // 96: SpaceX.API.Device.PingResult
	(*DeviceInfo)(nil),                        // 97: SpaceX.API.Device.DeviceInfo
	(*PublicKey)(nil),                         // 98: SpaceX.API.Device.PublicKey
	(*NetworkInterface)(nil),                  // 99: SpaceX.API.Device.NetworkInterface
	(*LLAPosition)(nil),                       // 100: SpaceX.API.Device.LLAPosition
	(*ECEFPosition)(nil),                      // 101: SpaceX.API.Device.ECEFPosition
}
var file_spacex_api_device_device_proto_depIdxs = []int32{
	3,   // 0: SpaceX.API.Device.ToDevice.request:type_name -> SpaceX.API.Device.Request
	4,   // 1: SpaceX.API.Device.FromDevice.response:type_name -> SpaceX.API.Device.Response
	5,   // 2: SpaceX.API.Device.FromDevice.event:type_name -> SpaceX.API.Device.Event
	54,  // 3: SpaceX.API.Device.Request.signed_request:type_name -> SpaceX.API.Device.SignedData
	55,  // 4: SpaceX.API.Device.Request.get_next_id:type_name -> SpaceX.API.Device.GetNextIdRequest
	56,  // 5: SpaceX.API.Device.Request.authenticate:type_name -> SpaceX.API.Device.AuthenticateRequest
	6,   // 6: SpaceX.API.Device.Request.enable_flow:type_name -> SpaceX.API.Device.EnableFlowRequest
	10,  // 7: SpaceX.API.Device.Request.factory_reset:type_name -> SpaceX.API.Device.FactoryResetRequest
	30,  // 8: SpaceX.API.Device.Request.get_device_info:type_name -> SpaceX.API.Device.GetDeviceInfoRequest
	14,  // 9: SpaceX.API.Device.Request.get_history:type_name -> SpaceX.API.Device.GetHistoryRequest
	15,  // 10: SpaceX.API.Device.Request.get_log:type_name -> SpaceX.API.Device.GetLogRequest
	40,  // 11: SpaceX.API.Device.Request.get_network_interfaces:type_name -> SpaceX.API.Device.GetNetworkInterfacesRequest
	17,  // 12: SpaceX.API.Device.Request.get_ping:type_name -> SpaceX.API.Device.GetPingRequest
	19,  // 13: SpaceX.API.Device.Request.ping_host:type_name -> SpaceX.API.Device.PingHostRequest
	21,  // 14: SpaceX.API.Device.Request.get_status:type_name -> SpaceX.API.Device.GetStatusRequest
	22,  // 15: SpaceX.API.Device.Request.reboot:type_name -> SpaceX.API.Device.RebootRequest
	34,  // 16: SpaceX.API.Device.Request.set_sku:type_name -> SpaceX.API.Device.SetSkuRequest
	32,  // 17: SpaceX.API.Device.Request.set_trusted_keys:type_name -> SpaceX.API.Device.SetTrustedKeysRequest
	26,  // 18: SpaceX.API.Device.Request.speed_test:type_name -> SpaceX.API.Device.SpeedTestRequest
	36,  // 19: SpaceX.API.Device.Request.update:type_name -> SpaceX.API.Device.UpdateRequest
	44,  // 20: SpaceX.API.Device.Request.get_location:type_name -> SpaceX.API.Device.GetLocationRequest
	42,  // 21: SpaceX.API.Device.Request.get_heap_dump:type_name -> SpaceX.API.Device.GetHeapDumpRequest
	38,  // 22: SpaceX.API.Device.Request.restart_control:type_name -> SpaceX.API.Device.RestartControlRequest
	12,  // 23: SpaceX.API.Device.Request.fuse:type_name -> SpaceX.API.Device.FuseRequest
	50,  // 24: SpaceX.API.Device.Request.get_persistent_stats:type_name -> SpaceX.API.Device.GetPersistentStatsRequest
	28,  // 25: SpaceX.API.Device.Request.get_connections:type_name -> SpaceX.API.Device.GetConnectionsRequest
	8,   // 26: SpaceX.API.Device.Request.flush_telem:type_name -> SpaceX.API.Device.FlushTelemRequest
	57,  // 27: SpaceX.API.Device.Request.dish_stow:type_name -> SpaceX.API.Device.DishStowRequest
	58,  // 28: SpaceX.API.Device.Request.dish_get_context:type_name -> SpaceX.API.Device.DishGetContextRequest
	59,  // 29: SpaceX.API.Device.Request.dish_get_obstruction_map:type_name -> SpaceX.API.Device.DishGetObstructionMapRequest
	46,  // 30: SpaceX.API.Device.Request.dish_set_emc:type_name -> SpaceX.API.Device.DishSetEmcRequest
	48,  // 31: SpaceX.API.Device.Request.dish_get_emc:type_name -> SpaceX.API.Device.DishGetEmcRequest
	60,  // 32: SpaceX.API.Device.Request.transceiver_if_loopback_test:type_name -> SpaceX.API.Device.TransceiverIFLoopbackTestRequest
	61,  // 33: SpaceX.API.Device.Request.transceiver_get_status:type_name -> SpaceX.API.Device.TransceiverGetStatusRequest
	62,  // 34: SpaceX.API.Device.Request.transceiver_get_telemetry:type_name -> SpaceX.API.Device.TransceiverGetTelemetryRequest
	63,  // 35: SpaceX.API.Device.Request.wifi_get_clients:type_name -> SpaceX.API.Device.WifiGetClientsRequest
	64,  // 36: SpaceX.API.Device.Request.wifi_get_diagnostics:type_name -> SpaceX.API.Device.WifiGetDiagnosticsRequest
	65,  // 37: SpaceX.API.Device.Request.wifi_get_ping_metrics:type_name -> SpaceX.API.Device.WifiGetPingMetricsRequest
	66,  // 38: SpaceX.API.Device.Request.wifi_set_config:type_name -> SpaceX.API.Device.WifiSetConfigRequest
	67,  // 39: SpaceX.API.Device.Request.wifi_get_config:type_name -> SpaceX.API.Device.WifiGetConfigRequest
	68,  // 40: SpaceX.API.Device.Request.wifi_setup:type_name -> SpaceX.API.Device.WifiSetupRequest
	69,  // 41: SpaceX.API.Device.Request.wifi_get_network_config:type_name -> SpaceX.API.Device.WifiGetNetworkConfigRequest
	70,  // 42: SpaceX.API.Device.Request.wifi_set_mesh_device_trust:type_name -> SpaceX.API.Device.WifiSetMeshDeviceTrustRequest
	71,  // 43: SpaceX.API.Device.Response.status:type_name -> SpaceX.API.Status.Status
	72,  // 44: SpaceX.API.Device.Response.get_next_id:type_name -> SpaceX.API.Device.GetNextIdResponse
	7,   // 45: SpaceX.API.Device.Response.enable_flow:type_name -> SpaceX.API.Device.EnableFlowResponse
	11,  // 46: SpaceX.API.Device.Response.factory_reset:type_name -> SpaceX.API.Device.FactoryResetResponse
	31,  // 47: SpaceX.API.Device.Response.get_device_info:type_name -> SpaceX.API.Device.GetDeviceInfoResponse
	16,  // 48: SpaceX.API.Device.Response.get_log:type_name -> SpaceX.API.Device.GetLogResponse
	41,  // 49: SpaceX.API.Device.Response.get_network_interfaces:type_name -> SpaceX.API.Device.GetNetworkInterfacesResponse
	18,  // 50: SpaceX.API.Device.Response.get_ping:type_name -> SpaceX.API.Device.GetPingResponse
	20,  // 51: SpaceX.API.Device.Response.ping_host:type_name -> SpaceX.API.Device.PingHostResponse
	23,  // 52: SpaceX.API.Device.Response.reboot:type_name -> SpaceX.API.Device.RebootResponse
	27,  // 53: SpaceX.API.Device.Response.speed_test:type_name -> SpaceX.API.Device.SpeedTestResponse
	35,  // 54: SpaceX.API.Device.Response.set_sku:type_name -> SpaceX.API.Device.SetSkuResponse
	33,  // 55: SpaceX.API.Device.Response.set_trusted_keys:type_name -> SpaceX.API.Device.SetTrustedKeysResponse
	37,  // 56: SpaceX.API.Device.Response.update:type_name -> SpaceX.API.Device.UpdateResponse
	45,  // 57: SpaceX.API.Device.Response.get_location:type_name -> SpaceX.API.Device.GetLocationResponse
	43,  // 58: SpaceX.API.Device.Response.get_heap_dump:type_name -> SpaceX.API.Device.GetHeapDumpResponse
	39,  // 59: SpaceX.API.Device.Response.restart_control:type_name -> SpaceX.API.Device.RestartControlResponse
	13,  // 60: SpaceX.API.Device.Response.fuse:type_name -> SpaceX.API.Device.FuseResponse
	29,  // 61: SpaceX.API.Device.Response.get_connections:type_name -> SpaceX.API.Device.GetConnectionsResponse
	9,   // 62: SpaceX.API.Device.Response.flush_telem:type_name -> SpaceX.API.Device.FlushTelemResponse
	73,  // 63: SpaceX.API.Device.Response.dish_authenticate:type_name -> SpaceX.API.Device.DishAuthenticateResponse
	74,  // 64: SpaceX.API.Device.Response.dish_get_context:type_name -> SpaceX.API.Device.DishGetContextResponse
	75,  // 65: SpaceX.API.Device.Response.dish_get_history:type_name -> SpaceX.API.Device.DishGetHistoryResponse
	76,  // 66: SpaceX.API.Device.Response.dish_get_status:type_name -> SpaceX.API.Device.DishGetStatusResponse
	77,  // 67: SpaceX.API.Device.Response.dish_get_obstruction_map:type_name -> SpaceX.API.Device.DishGetObstructionMapResponse
	78,  // 68: SpaceX.API.Device.Response.dish_stow:type_name -> SpaceX.API.Device.DishStowResponse
	47,  // 69: SpaceX.API.Device.Response.dish_set_emc:type_name -> SpaceX.API.Device.DishSetEmcResponse
	49,  // 70: SpaceX.API.Device.Response.dish_get_emc:type_name -> SpaceX.API.Device.DishGetEmcResponse
	79,  // 71: SpaceX.API.Device.Response.transceiver_if_loopback_test:type_name -> SpaceX.API.Device.TransceiverIFLoopbackTestResponse
	80,  // 72: SpaceX.API.Device.Response.transceiver_get_status:type_name -> SpaceX.API.Device.TransceiverGetStatusResponse
	81,  // 73: SpaceX.API.Device.Response.transceiver_get_telemetry:type_name -> SpaceX.API.Device.TransceiverGetTelemetryResponse
	82,  // 74: SpaceX.API.Device.Response.wifi_authenticate:type_name -> SpaceX.API.Device.WifiAuthenticateResponse
	83,  // 75: SpaceX.API.Device.Response.wifi_get_clients:type_name -> SpaceX.API.Device.WifiGetClientsResponse
	84,  // 76: SpaceX.API.Device.Response.wifi_get_diagnostics:type_name -> SpaceX.API.Device.WifiGetDiagnosticsResponse
	85,  // 77: SpaceX.API.Device.Response.wifi_get_history:type_name -> SpaceX.API.Device.WifiGetHistoryResponse
	86,  // 78: SpaceX.API.Device.Response.wifi_get_ping_metrics:type_name -> SpaceX.API.Device.WifiGetPingMetricsResponse
	87,  // 79: SpaceX.API.Device.Response.wifi_get_status:type_name -> SpaceX.API.Device.WifiGetStatusResponse
	88,  // 80: SpaceX.API.Device.Response.wifi_set_config:type_name -> SpaceX.API.Device.WifiSetConfigResponse
	89,  // 81: SpaceX.API.Device.Response.wifi_get_config:type_name -> SpaceX.API.Device.WifiGetConfigResponse
	90,  // 82: SpaceX.API.Device.Response.wifi_setup:type_name -> SpaceX.API.Device.WifiSetupResponse
	91,  // 83: SpaceX.API.Device.Response.wifi_get_persistent_stats:type_name -> SpaceX.API.Device.WifiGetPersistentStatsResponse
	92,  // 84: SpaceX.API.Device.Response.wifi_get_network_config:type_name -> SpaceX.API.Device.WifiGetNetworkConfigResponse
	93,  // 85: SpaceX.API.Device.Response.wifi_set_mesh_device_trust:type_name -> SpaceX.API.Device.WifiSetMeshDeviceTrustResponse
	94,  // 86: SpaceX.API.Device.Event.wifi_new_client_connected:type_name -> SpaceX.API.Device.WifiNewClientConnectedEvent
	95,  // 87: SpaceX.API.Device.Event.wifi_account_bonding:type_name -> SpaceX.API.Device.WifiAccountBondingEvent
	51,  // 88: SpaceX.API.Device.GetPingResponse.results:type_name -> SpaceX.API.Device.GetPingResponse.ResultsEntry
	96,  // 89: SpaceX.API.Device.PingHostResponse.result:type_name -> SpaceX.API.Device.PingResult
	0,   // 90: SpaceX.API.Device.ClientPlatform.platform:type_name -> SpaceX.API.Device.ClientPlatform.Platform
	24,  // 91: SpaceX.API.Device.SpeedTestRequest.client_speedtest:type_name -> SpaceX.API.Device.SpeedTestStats
	25,  // 92: SpaceX.API.Device.SpeedTestRequest.client_platform:type_name -> SpaceX.API.Device.ClientPlatform
	24,  // 93: SpaceX.API.Device.SpeedTestResponse.router_speedtest:type_name -> SpaceX.API.Device.SpeedTestStats
	53,  // 94: SpaceX.API.Device.GetConnectionsResponse.services:type_name -> SpaceX.API.Device.GetConnectionsResponse.ServicesEntry
	97,  // 95: SpaceX.API.Device.GetDeviceInfoResponse.device_info:type_name -> SpaceX.API.Device.DeviceInfo
	98,  // 96: SpaceX.API.Device.SetTrustedKeysRequest.keys:type_name -> SpaceX.API.Device.PublicKey
	99,  // 97: SpaceX.API.Device.GetNetworkInterfacesResponse.network_interfaces:type_name -> SpaceX.API.Device.NetworkInterface
	100, // 98: SpaceX.API.Device.GetLocationResponse.lla:type_name -> SpaceX.API.Device.LLAPosition
	101, // 99: SpaceX.API.Device.GetLocationResponse.ecef:type_name -> SpaceX.API.Device.ECEFPosition
	96,  // 100: SpaceX.API.Device.GetPingResponse.ResultsEntry.value:type_name -> SpaceX.API.Device.PingResult
	52,  // 101: SpaceX.API.Device.GetConnectionsResponse.ServicesEntry.value:type_name -> SpaceX.API.Device.GetConnectionsResponse.ServiceConnection
	1,   // 102: SpaceX.API.Device.Device.Stream:input_type -> SpaceX.API.Device.ToDevice
	3,   // 103: SpaceX.API.Device.Device.Handle:input_type -> SpaceX.API.Device.Request
	2,   // 104: SpaceX.API.Device.Device.Stream:output_type -> SpaceX.API.Device.FromDevice
	4,   // 105: SpaceX.API.Device.Device.Handle:output_type -> SpaceX.API.Device.Response
	104, // [104:106] is the sub-list for method output_type
	102, // [102:104] is the sub-list for method input_type
	102, // [102:102] is the sub-list for extension type_name
	102, // [102:102] is the sub-list for extension extendee
	0,   // [0:102] is the sub-list for field type_name
}

func init() { file_spacex_api_device_device_proto_init() }
func file_spacex_api_device_device_proto_init() {
	if File_spacex_api_device_device_proto != nil {
		return
	}
	file_spacex_api_device_command_proto_init()
	file_spacex_api_device_common_proto_init()
	file_spacex_api_device_dish_proto_init()
	file_spacex_api_device_transceiver_proto_init()
	file_spacex_api_device_wifi_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spacex_api_device_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushTelemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushTelemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoryResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoryResetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingHostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedTestStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientPlatform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTrustedKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTrustedKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkInterfacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkInterfacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeapDumpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeapDumpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DishSetEmcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DishSetEmcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DishGetEmcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DishGetEmcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersistentStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spacex_api_device_device_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionsResponse_ServiceConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spacex_api_device_device_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ToDevice_Request)(nil),
	}
	file_spacex_api_device_device_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FromDevice_Response)(nil),
		(*FromDevice_Event)(nil),
	}
	file_spacex_api_device_device_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Request_SignedRequest)(nil),
		(*Request_GetNextId)(nil),
		(*Request_Authenticate)(nil),
		(*Request_EnableFlow)(nil),
		(*Request_FactoryReset)(nil),
		(*Request_GetDeviceInfo)(nil),
		(*Request_GetHistory)(nil),
		(*Request_GetLog)(nil),
		(*Request_GetNetworkInterfaces)(nil),
		(*Request_GetPing)(nil),
		(*Request_PingHost)(nil),
		(*Request_GetStatus)(nil),
		(*Request_Reboot)(nil),
		(*Request_SetSku)(nil),
		(*Request_SetTrustedKeys)(nil),
		(*Request_SpeedTest)(nil),
		(*Request_Update)(nil),
		(*Request_GetLocation)(nil),
		(*Request_GetHeapDump)(nil),
		(*Request_RestartControl)(nil),
		(*Request_Fuse)(nil),
		(*Request_GetPersistentStats)(nil),
		(*Request_GetConnections)(nil),
		(*Request_FlushTelem)(nil),
		(*Request_DishStow)(nil),
		(*Request_DishGetContext)(nil),
		(*Request_DishGetObstructionMap)(nil),
		(*Request_DishSetEmc)(nil),
		(*Request_DishGetEmc)(nil),
		(*Request_TransceiverIfLoopbackTest)(nil),
		(*Request_TransceiverGetStatus)(nil),
		(*Request_TransceiverGetTelemetry)(nil),
		(*Request_WifiGetClients)(nil),
		(*Request_WifiGetDiagnostics)(nil),
		(*Request_WifiGetPingMetrics)(nil),
		(*Request_WifiSetConfig)(nil),
		(*Request_WifiGetConfig)(nil),
		(*Request_WifiSetup)(nil),
		(*Request_WifiGetNetworkConfig)(nil),
		(*Request_WifiSetMeshDeviceTrust)(nil),
	}
	file_spacex_api_device_device_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Response_GetNextId)(nil),
		(*Response_EnableFlow)(nil),
		(*Response_FactoryReset)(nil),
		(*Response_GetDeviceInfo)(nil),
		(*Response_GetLog)(nil),
		(*Response_GetNetworkInterfaces)(nil),
		(*Response_GetPing)(nil),
		(*Response_PingHost)(nil),
		(*Response_Reboot)(nil),
		(*Response_SpeedTest)(nil),
		(*Response_SetSku)(nil),
		(*Response_SetTrustedKeys)(nil),
		(*Response_Update)(nil),
		(*Response_GetLocation)(nil),
		(*Response_GetHeapDump)(nil),
		(*Response_RestartControl)(nil),
		(*Response_Fuse)(nil),
		(*Response_GetConnections)(nil),
		(*Response_FlushTelem)(nil),
		(*Response_DishAuthenticate)(nil),
		(*Response_DishGetContext)(nil),
		(*Response_DishGetHistory)(nil),
		(*Response_DishGetStatus)(nil),
		(*Response_DishGetObstructionMap)(nil),
		(*Response_DishStow)(nil),
		(*Response_DishSetEmc)(nil),
		(*Response_DishGetEmc)(nil),
		(*Response_TransceiverIfLoopbackTest)(nil),
		(*Response_TransceiverGetStatus)(nil),
		(*Response_TransceiverGetTelemetry)(nil),
		(*Response_WifiAuthenticate)(nil),
		(*Response_WifiGetClients)(nil),
		(*Response_WifiGetDiagnostics)(nil),
		(*Response_WifiGetHistory)(nil),
		(*Response_WifiGetPingMetrics)(nil),
		(*Response_WifiGetStatus)(nil),
		(*Response_WifiSetConfig)(nil),
		(*Response_WifiGetConfig)(nil),
		(*Response_WifiSetup)(nil),
		(*Response_WifiGetPersistentStats)(nil),
		(*Response_WifiGetNetworkConfig)(nil),
		(*Response_WifiSetMeshDeviceTrust)(nil),
	}
	file_spacex_api_device_device_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Event_WifiNewClientConnected)(nil),
		(*Event_WifiAccountBonding)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spacex_api_device_device_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spacex_api_device_device_proto_goTypes,
		DependencyIndexes: file_spacex_api_device_device_proto_depIdxs,
		EnumInfos:         file_spacex_api_device_device_proto_enumTypes,
		MessageInfos:      file_spacex_api_device_device_proto_msgTypes,
	}.Build()
	File_spacex_api_device_device_proto = out.File
	file_spacex_api_device_device_proto_rawDesc = nil
	file_spacex_api_device_device_proto_goTypes = nil
	file_spacex_api_device_device_proto_depIdxs = nil
}
